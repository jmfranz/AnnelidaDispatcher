// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: annelida_sensors.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AnnelidaDispatcher.Model.DataTransmission {

  /// <summary>Holder for reflection information generated from annelida_sensors.proto</summary>
  public static partial class AnnelidaSensorsReflection {

    #region Descriptor
    /// <summary>File descriptor for annelida_sensors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnnelidaSensorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZhbm5lbGlkYV9zZW5zb3JzLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvItIgCg9Bbm5lbGlkYVNlbnNvcnMSLQoJdGltZXN0YW1w",
            "GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI6Cg1lbmNfcmVj",
            "ZXB0aW9uGAIgASgLMiMuQW5uZWxpZGFTZW5zb3JzLlVtYmlsaWNhbFJlY2Vw",
            "dGlvbhJDChNlbmNfbm90X3JlZ3VsYXRlZF8xGAMgASgLMiYuQW5uZWxpZGFT",
            "ZW5zb3JzLk5vdFJlZ3VsYXRlZENvbnZlcnRlchJDChNlbmNfbm90X3JlZ3Vs",
            "YXRlZF8yGAQgASgLMiYuQW5uZWxpZGFTZW5zb3JzLk5vdFJlZ3VsYXRlZENv",
            "bnZlcnRlchI8Cg9lbmNfcmVndWxhdGVkXzEYBSABKAsyIy5Bbm5lbGlkYVNl",
            "bnNvcnMuUmVndWxhdGVkQ29udmVydGVyEjwKD2VuY19yZWd1bGF0ZWRfMhgG",
            "IAEoCzIjLkFubmVsaWRhU2Vuc29ycy5SZWd1bGF0ZWRDb252ZXJ0ZXISPAoT",
            "ZW5jX2VtYmVkZGVkX3N5c3RlbRgHIAEoCzIfLkFubmVsaWRhU2Vuc29ycy5F",
            "bWJlZGRlZFN5c3RlbRJAChZlbmNfbW90b3JfY29udHJvbGxlcl8xGAggASgL",
            "MiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchJAChZlbmNfbW90",
            "b3JfY29udHJvbGxlcl8yGAkgASgLMiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9y",
            "Q29udHJvbGxlchJAChZlbmNfbW90b3JfY29udHJvbGxlcl8zGAogASgLMiAu",
            "QW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchJAChZlbmNfbW90b3Jf",
            "Y29udHJvbGxlcl80GAsgASgLMiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29u",
            "dHJvbGxlchJAChZlbmNfbW90b3JfY29udHJvbGxlcl81GAwgASgLMiAuQW5u",
            "ZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchI7ChZlbmNfZm9yd2FyZF9s",
            "b2NvbW90aXZlGA0gASgLMhsuQW5uZWxpZGFTZW5zb3JzLkxvY29tb3RpdmUS",
            "PAoXZW5jX2JhY2t3YXJkX2xvY29tb3RpdmUYDiABKAsyGy5Bbm5lbGlkYVNl",
            "bnNvcnMuTG9jb21vdGl2ZRIyCgxzeXN0ZW1fcHVtcHMYDyABKAsyHC5Bbm5l",
            "bGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUSMAoLZW5jX3JlYWN0b3IYECABKAsy",
            "Gy5Bbm5lbGlkYVNlbnNvcnMuU2duUmVhY3RvchomChJVbWJpbGljYWxSZWNl",
            "cHRpb24SEAoIdHJhY3Rpb24YASABKA0apQIKFU5vdFJlZ3VsYXRlZENvbnZl",
            "cnRlchIcChRpbnRlcm5hbF90ZW1wZXJhdHVyZRgBIAMoAhIZChFpbnRlcm5h",
            "bF9wcmVzc3VyZRgCIAMoAhIdChVlbGVjdHJpY2FsX2N1cnJlbnRfYzEYAyAD",
            "KAISHQoVZWxlY3RyaWNhbF9jdXJyZW50X2MyGAQgAygCEh0KFWVsZWN0cmlj",
            "YWxfY3VycmVudF9jMxgFIAMoAhIbChNlbGVjdHJpY2FsX3Bvd2VyX3AxGAYg",
            "AygCEhsKE2VsZWN0cmljYWxfcG93ZXJfcDIYByADKAISGwoTZWxlY3RyaWNh",
            "bF9wb3dlcl9wMxgIIAMoAhIfChdlbGVjdHJpY2FsX3RlbnNpb25fNzAwdhgJ",
            "IAMoAhrZAgoSUmVndWxhdGVkQ29udmVydGVyEhwKFGludGVybmFsX3RlbXBl",
            "cmF0dXJlGAEgAygCEhkKEWludGVybmFsX3ByZXNzdXJlGAIgAygCEh0KFWVs",
            "ZWN0cmljYWxfY3VycmVudF9jMRgDIAMoAhIdChVlbGVjdHJpY2FsX2N1cnJl",
            "bnRfYzIYBCADKAISHQoVZWxlY3RyaWNhbF9jdXJyZW50X2MzGAUgAygCEh0K",
            "FWVsZWN0cmljYWxfY3VycmVudF9jNBgGIAMoAhIbChNlbGVjdHJpY2FsX3Bv",
            "d2VyX3AxGAcgAygCEhsKE2VsZWN0cmljYWxfcG93ZXJfcDIYCCADKAISGwoT",
            "ZWxlY3RyaWNhbF9wb3dlcl9wMxgJIAMoAhIbChNlbGVjdHJpY2FsX3Bvd2Vy",
            "X3A0GAogAygCEhoKEmVsZWN0cmljYWxfdGVuc2lvbhgLIAMoAhq3AgoORW1i",
            "ZWRkZWRTeXN0ZW0SHAoUaW50ZXJuYWxfdGVtcGVyYXR1cmUYASADKAISGQoR",
            "aW50ZXJuYWxfcHJlc3N1cmUYAiADKAISIAoYZXh0ZXJuYWxfbW9kdWxlX3By",
            "ZXNzdXJlGAMgAygCEhIKCnJvdGF0aW9uX3gYBCADKAISEgoKcm90YXRpb25f",
            "eRgFIAMoAhISCgpyb3RhdGlvbl96GAYgAygCEhYKDmRpc3BsYWNlbWVudF94",
            "GAcgAygCEhYKDmRpc3BsYWNlbWVudF95GAggAygCEhYKDmRpc3BsYWNlbWVu",
            "dF96GAkgAygCEhYKDmFjY2VsZXJhdGlvbl94GAogAygCEhYKDmFjY2VsZXJh",
            "dGlvbl95GAsgAygCEhYKDmFjY2VsZXJhdGlvbl96GAwgAygCGoIBCg9Nb3Rv",
            "ckNvbnRyb2xsZXISHAoUaW50ZXJuYWxfdGVtcGVyYXR1cmUYASADKAISGQoR",
            "aW50ZXJuYWxfcHJlc3N1cmUYAiADKAISGgoSZWxlY3RyaWNhbF9jdXJyZW50",
            "GAMgAygCEhoKEmVsZWN0cmljYWxfdGVuc2lvbhgEIAMoAhphCgpMb2NvbW90",
            "aXZlEigKEGN5bGluZGVyX2ZvcndhcmQYASADKA4yDi5DeWxpbmRlclN0YXRl",
            "EikKEWN5bGluZGVyX2JhY2t3YXJkGAIgAygOMg4uQ3lsaW5kZXJTdGF0ZRq3",
            "DgoLUHVtcHNFbmdpbmUSUQoXZW5jX21hbmlmb2xkXzFfYmFja3dhcmQYASAB",
            "KAsyMC5Bbm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUuTWFuaWZvbGRfMV9C",
            "YWNrd2FyZBJRChdlbmNfbWFuaWZvbGRfM19iYWNrd2FyZBgCIAEoCzIwLkFu",
            "bmVsaWRhU2Vuc29ycy5QdW1wc0VuZ2luZS5NYW5pZm9sZF8zX0JhY2t3YXJk",
            "EkIKEGVuY19tb3Rvcl9ib21iXzEYAyABKAsyKC5Bbm5lbGlkYVNlbnNvcnMu",
            "UHVtcHNFbmdpbmUuTW90b3JCb21iXzESQgoQZW5jX21vdG9yX2JvbWJfMhgE",
            "IAEoCzIoLkFubmVsaWRhU2Vuc29ycy5QdW1wc0VuZ2luZS5Nb3RvckJvbWJf",
            "MhJRChdlbmNfbWFuaWZvbGRfMl9hdXhpbGlhchgFIAEoCzIwLkFubmVsaWRh",
            "U2Vuc29ycy5QdW1wc0VuZ2luZS5NYW5pZm9sZF8yX0F1eGlsaWFyEk8KF2Vu",
            "Y19tb3Rvcl9ib21iX2F1eGlsaWFyGAYgASgLMi4uQW5uZWxpZGFTZW5zb3Jz",
            "LlB1bXBzRW5naW5lLk1vdG9yQm9tYkF1eGlsaWFyEkkKE2VuY19tYW5pZm9s",
            "ZF8yX21haW4YByABKAsyLC5Bbm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUu",
            "TWFuaWZvbGRfMl9NYWluEkIKEGVuY19tb3Rvcl9ib21iXzMYCCABKAsyKC5B",
            "bm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUuTW90b3JCb21iXzMSQgoQZW5j",
            "X21vdG9yX2JvbWJfNBgJIAEoCzIoLkFubmVsaWRhU2Vuc29ycy5QdW1wc0Vu",
            "Z2luZS5Nb3RvckJvbWJfNBJPChZlbmNfbWFuaWZvbGRfM19mb3J3YXJkGAog",
            "ASgLMi8uQW5uZWxpZGFTZW5zb3JzLlB1bXBzRW5naW5lLk1hbmlmb2xkXzNf",
            "Rm9yd2FyZBJPChZlbmNfbWFuaWZvbGRfMV9mb3J3YXJkGAsgASgLMi8uQW5u",
            "ZWxpZGFTZW5zb3JzLlB1bXBzRW5naW5lLk1hbmlmb2xkXzFfRm9yd2FyZBqJ",
            "AQoTTWFuaWZvbGRfMV9CYWNrd2FyZBI3Ch9zb2xlbm9pZF9jeWxpbmRlcl9t",
            "b3ZlX2JhY2t3YXJkGAEgAygOMg4uU29sZW5vaWRTdGF0ZRI5CiFzb2xlbm9p",
            "ZF9jeWxpbmRlcl9hY3RpdmVfYmFja3dhcmQYAiADKA4yDi5Tb2xlbm9pZFN0",
            "YXRlGkwKE01hbmlmb2xkXzNfQmFja3dhcmQSNQodc29sZW5vaWRfYWN0aXZl",
            "X2Zvb3RfYmFja3dhcmQYASADKA4yDi5Tb2xlbm9pZFN0YXRlGk4KC01vdG9y",
            "Qm9tYl8xEhcKD29pbF90ZW1wZXJhdHVyZRgBIAMoAhIRCgltb3Rvcl9ycG0Y",
            "AiADKA0SEwoLbW90b3JfcG93ZXIYAyADKAIaNQoLTW90b3JCb21iXzISEQoJ",
            "bW90b3JfcnBtGAEgAygNEhMKC21vdG9yX3Bvd2VyGAIgAygCGmgKE01hbmlm",
            "b2xkXzJfQXV4aWxpYXISIAoYaHlkcmF1bGljX2Zvb3RzX3ByZXNzdXJlGAEg",
            "AygCEi8KF3NvbGVub2lkX3ByZXNzdXJlX2Zvb3RzGAIgAygOMg4uU29sZW5v",
            "aWRTdGF0ZRpXChFNb3RvckJvbWJBdXhpbGlhchIaChJ0ZW1wZXJhdHVyZV9z",
            "ZW5zb3IYASADKAISEQoJbW90b3JfcnBtGAIgAygNEhMKC21vdG9yX3Bvd2Vy",
            "GAMgAygCGmYKD01hbmlmb2xkXzJfTWFpbhIjChtoeWRyYXVsaWNfY3lsaW5k",
            "ZXJfcHJlc3N1cmUYASADKAISLgoWc29sZW5vaWRfbW92ZV9wcmVzc3VyZRgC",
            "IAMoDjIOLlNvbGVub2lkU3RhdGUaNQoLTW90b3JCb21iXzMSEQoJbW90b3Jf",
            "cnBtGAEgAygCEhMKC21vdG9yX3Bvd2VyGAIgAygCGk4KC01vdG9yQm9tYl80",
            "EhcKD29pbF90ZW1wZXJhdHVyZRgBIAMoAhIRCgltb3Rvcl9ycG0YAiADKA0S",
            "EwoLbW90b3JfcG93ZXIYAyADKAIaRQoSTWFuaWZvbGRfM19Gb3J3YXJkEi8K",
            "F3NvbGVub2lkX2FjdGl2ZV9mb3J3YXJkGAEgAygOMg4uU29sZW5vaWRTdGF0",
            "ZRqGAQoSTWFuaWZvbGRfMV9Gb3J3YXJkEjYKHnNvbGVub2lkX2N5bGluZGVy",
            "X21vdmVfZm9yd2FyZBgBIAMoDjIOLlNvbGVub2lkU3RhdGUSOAogc29sZW5v",
            "aWRfY3lsaW5kZXJfYWN0aXZlX2ZvcndhcmQYAiADKA4yDi5Tb2xlbm9pZFN0",
            "YXRlGl0KClNnblJlYWN0b3ISFwoPc2duX3RlbXBlcmF0dXJlGAEgAygCEhwK",
            "FG9ic3RydWN0aW9uX2RldGVjdGVkGAIgAygIEhgKEHJlYWN0b3JfcHJlc3N1",
            "cmUYAyADKAIqPwoNU29sZW5vaWRTdGF0ZRITCg9VTktOT1dfU09MRU5PSUQQ",
            "ABILCgdBQ1RJVkVEEAESDAoIRElTQUJMRUQQAipBCg1DeWxpbmRlclN0YXRl",
            "EhMKD1VOS05PV19DWUxJTkRFUhAAEgwKCEFEVkFOQ0VEEAESDQoJV0lUSERS",
            "QVdOEAJCLKoCKUFubmVsaWRhRGlzcGF0Y2hlci5Nb2RlbC5EYXRhVHJhbnNt",
            "aXNzaW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState), typeof(global::AnnelidaDispatcher.Model.DataTransmission.CylinderState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Parser, new[]{ "Timestamp", "EncReception", "EncNotRegulated1", "EncNotRegulated2", "EncRegulated1", "EncRegulated2", "EncEmbeddedSystem", "EncMotorController1", "EncMotorController2", "EncMotorController3", "EncMotorController4", "EncMotorController5", "EncForwardLocomotive", "EncBackwardLocomotive", "SystemPumps", "EncReactor" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception.Parser, new[]{ "Traction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrentC1", "ElectricalCurrentC2", "ElectricalCurrentC3", "ElectricalPowerP1", "ElectricalPowerP2", "ElectricalPowerP3", "ElectricalTension700V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrentC1", "ElectricalCurrentC2", "ElectricalCurrentC3", "ElectricalCurrentC4", "ElectricalPowerP1", "ElectricalPowerP2", "ElectricalPowerP3", "ElectricalPowerP4", "ElectricalTension" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem.Parser, new[]{ "InternalTemperature", "InternalPressure", "ExternalModulePressure", "RotationX", "RotationY", "RotationZ", "DisplacementX", "DisplacementY", "DisplacementZ", "AccelerationX", "AccelerationY", "AccelerationZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrent", "ElectricalTension" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive.Parser, new[]{ "CylinderForward", "CylinderBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Parser, new[]{ "EncManifold1Backward", "EncManifold3Backward", "EncMotorBomb1", "EncMotorBomb2", "EncManifold2Auxiliar", "EncMotorBombAuxiliar", "EncManifold2Main", "EncMotorBomb3", "EncMotorBomb4", "EncManifold3Forward", "EncManifold1Forward" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward.Parser, new[]{ "SolenoidCylinderMoveBackward", "SolenoidCylinderActiveBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward.Parser, new[]{ "SolenoidActiveFootBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1.Parser, new[]{ "OilTemperature", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2.Parser, new[]{ "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar.Parser, new[]{ "HydraulicFootsPressure", "SolenoidPressureFoots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar.Parser, new[]{ "TemperatureSensor", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main.Parser, new[]{ "HydraulicCylinderPressure", "SolenoidMovePressure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3.Parser, new[]{ "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4.Parser, new[]{ "OilTemperature", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward.Parser, new[]{ "SolenoidActiveForward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward.Parser, new[]{ "SolenoidCylinderMoveForward", "SolenoidCylinderActiveForward" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor.Parser, new[]{ "SgnTemperature", "ObstructionDetected", "ReactorPressure" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum SolenoidState {
    [pbr::OriginalName("UNKNOW_SOLENOID")] UnknowSolenoid = 0,
    [pbr::OriginalName("ACTIVED")] Actived = 1,
    [pbr::OriginalName("DISABLED")] Disabled = 2,
  }

  public enum CylinderState {
    [pbr::OriginalName("UNKNOW_CYLINDER")] UnknowCylinder = 0,
    [pbr::OriginalName("ADVANCED")] Advanced = 1,
    [pbr::OriginalName("WITHDRAWN")] Withdrawn = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AnnelidaSensors : pb::IMessage<AnnelidaSensors> {
    private static readonly pb::MessageParser<AnnelidaSensors> _parser = new pb::MessageParser<AnnelidaSensors>(() => new AnnelidaSensors());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnelidaSensors> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors(AnnelidaSensors other) : this() {
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      EncReception = other.encReception_ != null ? other.EncReception.Clone() : null;
      EncNotRegulated1 = other.encNotRegulated1_ != null ? other.EncNotRegulated1.Clone() : null;
      EncNotRegulated2 = other.encNotRegulated2_ != null ? other.EncNotRegulated2.Clone() : null;
      EncRegulated1 = other.encRegulated1_ != null ? other.EncRegulated1.Clone() : null;
      EncRegulated2 = other.encRegulated2_ != null ? other.EncRegulated2.Clone() : null;
      EncEmbeddedSystem = other.encEmbeddedSystem_ != null ? other.EncEmbeddedSystem.Clone() : null;
      EncMotorController1 = other.encMotorController1_ != null ? other.EncMotorController1.Clone() : null;
      EncMotorController2 = other.encMotorController2_ != null ? other.EncMotorController2.Clone() : null;
      EncMotorController3 = other.encMotorController3_ != null ? other.EncMotorController3.Clone() : null;
      EncMotorController4 = other.encMotorController4_ != null ? other.EncMotorController4.Clone() : null;
      EncMotorController5 = other.encMotorController5_ != null ? other.EncMotorController5.Clone() : null;
      EncForwardLocomotive = other.encForwardLocomotive_ != null ? other.EncForwardLocomotive.Clone() : null;
      EncBackwardLocomotive = other.encBackwardLocomotive_ != null ? other.EncBackwardLocomotive.Clone() : null;
      SystemPumps = other.systemPumps_ != null ? other.SystemPumps.Clone() : null;
      EncReactor = other.encReactor_ != null ? other.EncReactor.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors Clone() {
      return new AnnelidaSensors(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "enc_reception" field.</summary>
    public const int EncReceptionFieldNumber = 2;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception encReception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception EncReception {
      get { return encReception_; }
      set {
        encReception_ = value;
      }
    }

    /// <summary>Field number for the "enc_not_regulated_1" field.</summary>
    public const int EncNotRegulated1FieldNumber = 3;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter encNotRegulated1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter EncNotRegulated1 {
      get { return encNotRegulated1_; }
      set {
        encNotRegulated1_ = value;
      }
    }

    /// <summary>Field number for the "enc_not_regulated_2" field.</summary>
    public const int EncNotRegulated2FieldNumber = 4;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter encNotRegulated2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter EncNotRegulated2 {
      get { return encNotRegulated2_; }
      set {
        encNotRegulated2_ = value;
      }
    }

    /// <summary>Field number for the "enc_regulated_1" field.</summary>
    public const int EncRegulated1FieldNumber = 5;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter encRegulated1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter EncRegulated1 {
      get { return encRegulated1_; }
      set {
        encRegulated1_ = value;
      }
    }

    /// <summary>Field number for the "enc_regulated_2" field.</summary>
    public const int EncRegulated2FieldNumber = 6;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter encRegulated2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter EncRegulated2 {
      get { return encRegulated2_; }
      set {
        encRegulated2_ = value;
      }
    }

    /// <summary>Field number for the "enc_embedded_system" field.</summary>
    public const int EncEmbeddedSystemFieldNumber = 7;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem encEmbeddedSystem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem EncEmbeddedSystem {
      get { return encEmbeddedSystem_; }
      set {
        encEmbeddedSystem_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_1" field.</summary>
    public const int EncMotorController1FieldNumber = 8;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController1 {
      get { return encMotorController1_; }
      set {
        encMotorController1_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_2" field.</summary>
    public const int EncMotorController2FieldNumber = 9;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController2 {
      get { return encMotorController2_; }
      set {
        encMotorController2_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_3" field.</summary>
    public const int EncMotorController3FieldNumber = 10;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController3 {
      get { return encMotorController3_; }
      set {
        encMotorController3_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_4" field.</summary>
    public const int EncMotorController4FieldNumber = 11;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController4 {
      get { return encMotorController4_; }
      set {
        encMotorController4_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_5" field.</summary>
    public const int EncMotorController5FieldNumber = 12;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController5 {
      get { return encMotorController5_; }
      set {
        encMotorController5_ = value;
      }
    }

    /// <summary>Field number for the "enc_forward_locomotive" field.</summary>
    public const int EncForwardLocomotiveFieldNumber = 13;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive encForwardLocomotive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive EncForwardLocomotive {
      get { return encForwardLocomotive_; }
      set {
        encForwardLocomotive_ = value;
      }
    }

    /// <summary>Field number for the "enc_backward_locomotive" field.</summary>
    public const int EncBackwardLocomotiveFieldNumber = 14;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive encBackwardLocomotive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive EncBackwardLocomotive {
      get { return encBackwardLocomotive_; }
      set {
        encBackwardLocomotive_ = value;
      }
    }

    /// <summary>Field number for the "system_pumps" field.</summary>
    public const int SystemPumpsFieldNumber = 15;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine systemPumps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine SystemPumps {
      get { return systemPumps_; }
      set {
        systemPumps_ = value;
      }
    }

    /// <summary>Field number for the "enc_reactor" field.</summary>
    public const int EncReactorFieldNumber = 16;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor encReactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor EncReactor {
      get { return encReactor_; }
      set {
        encReactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnelidaSensors);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnelidaSensors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(EncReception, other.EncReception)) return false;
      if (!object.Equals(EncNotRegulated1, other.EncNotRegulated1)) return false;
      if (!object.Equals(EncNotRegulated2, other.EncNotRegulated2)) return false;
      if (!object.Equals(EncRegulated1, other.EncRegulated1)) return false;
      if (!object.Equals(EncRegulated2, other.EncRegulated2)) return false;
      if (!object.Equals(EncEmbeddedSystem, other.EncEmbeddedSystem)) return false;
      if (!object.Equals(EncMotorController1, other.EncMotorController1)) return false;
      if (!object.Equals(EncMotorController2, other.EncMotorController2)) return false;
      if (!object.Equals(EncMotorController3, other.EncMotorController3)) return false;
      if (!object.Equals(EncMotorController4, other.EncMotorController4)) return false;
      if (!object.Equals(EncMotorController5, other.EncMotorController5)) return false;
      if (!object.Equals(EncForwardLocomotive, other.EncForwardLocomotive)) return false;
      if (!object.Equals(EncBackwardLocomotive, other.EncBackwardLocomotive)) return false;
      if (!object.Equals(SystemPumps, other.SystemPumps)) return false;
      if (!object.Equals(EncReactor, other.EncReactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (encReception_ != null) hash ^= EncReception.GetHashCode();
      if (encNotRegulated1_ != null) hash ^= EncNotRegulated1.GetHashCode();
      if (encNotRegulated2_ != null) hash ^= EncNotRegulated2.GetHashCode();
      if (encRegulated1_ != null) hash ^= EncRegulated1.GetHashCode();
      if (encRegulated2_ != null) hash ^= EncRegulated2.GetHashCode();
      if (encEmbeddedSystem_ != null) hash ^= EncEmbeddedSystem.GetHashCode();
      if (encMotorController1_ != null) hash ^= EncMotorController1.GetHashCode();
      if (encMotorController2_ != null) hash ^= EncMotorController2.GetHashCode();
      if (encMotorController3_ != null) hash ^= EncMotorController3.GetHashCode();
      if (encMotorController4_ != null) hash ^= EncMotorController4.GetHashCode();
      if (encMotorController5_ != null) hash ^= EncMotorController5.GetHashCode();
      if (encForwardLocomotive_ != null) hash ^= EncForwardLocomotive.GetHashCode();
      if (encBackwardLocomotive_ != null) hash ^= EncBackwardLocomotive.GetHashCode();
      if (systemPumps_ != null) hash ^= SystemPumps.GetHashCode();
      if (encReactor_ != null) hash ^= EncReactor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (encReception_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EncReception);
      }
      if (encNotRegulated1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EncNotRegulated1);
      }
      if (encNotRegulated2_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EncNotRegulated2);
      }
      if (encRegulated1_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EncRegulated1);
      }
      if (encRegulated2_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EncRegulated2);
      }
      if (encEmbeddedSystem_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EncEmbeddedSystem);
      }
      if (encMotorController1_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EncMotorController1);
      }
      if (encMotorController2_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EncMotorController2);
      }
      if (encMotorController3_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EncMotorController3);
      }
      if (encMotorController4_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EncMotorController4);
      }
      if (encMotorController5_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EncMotorController5);
      }
      if (encForwardLocomotive_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EncForwardLocomotive);
      }
      if (encBackwardLocomotive_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EncBackwardLocomotive);
      }
      if (systemPumps_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SystemPumps);
      }
      if (encReactor_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EncReactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (encReception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncReception);
      }
      if (encNotRegulated1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncNotRegulated1);
      }
      if (encNotRegulated2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncNotRegulated2);
      }
      if (encRegulated1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncRegulated1);
      }
      if (encRegulated2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncRegulated2);
      }
      if (encEmbeddedSystem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncEmbeddedSystem);
      }
      if (encMotorController1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController1);
      }
      if (encMotorController2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController2);
      }
      if (encMotorController3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController3);
      }
      if (encMotorController4_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController4);
      }
      if (encMotorController5_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController5);
      }
      if (encForwardLocomotive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncForwardLocomotive);
      }
      if (encBackwardLocomotive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncBackwardLocomotive);
      }
      if (systemPumps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemPumps);
      }
      if (encReactor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncReactor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnelidaSensors other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.encReception_ != null) {
        if (encReception_ == null) {
          encReception_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception();
        }
        EncReception.MergeFrom(other.EncReception);
      }
      if (other.encNotRegulated1_ != null) {
        if (encNotRegulated1_ == null) {
          encNotRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
        }
        EncNotRegulated1.MergeFrom(other.EncNotRegulated1);
      }
      if (other.encNotRegulated2_ != null) {
        if (encNotRegulated2_ == null) {
          encNotRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
        }
        EncNotRegulated2.MergeFrom(other.EncNotRegulated2);
      }
      if (other.encRegulated1_ != null) {
        if (encRegulated1_ == null) {
          encRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
        }
        EncRegulated1.MergeFrom(other.EncRegulated1);
      }
      if (other.encRegulated2_ != null) {
        if (encRegulated2_ == null) {
          encRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
        }
        EncRegulated2.MergeFrom(other.EncRegulated2);
      }
      if (other.encEmbeddedSystem_ != null) {
        if (encEmbeddedSystem_ == null) {
          encEmbeddedSystem_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem();
        }
        EncEmbeddedSystem.MergeFrom(other.EncEmbeddedSystem);
      }
      if (other.encMotorController1_ != null) {
        if (encMotorController1_ == null) {
          encMotorController1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController1.MergeFrom(other.EncMotorController1);
      }
      if (other.encMotorController2_ != null) {
        if (encMotorController2_ == null) {
          encMotorController2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController2.MergeFrom(other.EncMotorController2);
      }
      if (other.encMotorController3_ != null) {
        if (encMotorController3_ == null) {
          encMotorController3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController3.MergeFrom(other.EncMotorController3);
      }
      if (other.encMotorController4_ != null) {
        if (encMotorController4_ == null) {
          encMotorController4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController4.MergeFrom(other.EncMotorController4);
      }
      if (other.encMotorController5_ != null) {
        if (encMotorController5_ == null) {
          encMotorController5_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController5.MergeFrom(other.EncMotorController5);
      }
      if (other.encForwardLocomotive_ != null) {
        if (encForwardLocomotive_ == null) {
          encForwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
        }
        EncForwardLocomotive.MergeFrom(other.EncForwardLocomotive);
      }
      if (other.encBackwardLocomotive_ != null) {
        if (encBackwardLocomotive_ == null) {
          encBackwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
        }
        EncBackwardLocomotive.MergeFrom(other.EncBackwardLocomotive);
      }
      if (other.systemPumps_ != null) {
        if (systemPumps_ == null) {
          systemPumps_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine();
        }
        SystemPumps.MergeFrom(other.SystemPumps);
      }
      if (other.encReactor_ != null) {
        if (encReactor_ == null) {
          encReactor_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor();
        }
        EncReactor.MergeFrom(other.EncReactor);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 18: {
            if (encReception_ == null) {
              encReception_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception();
            }
            input.ReadMessage(encReception_);
            break;
          }
          case 26: {
            if (encNotRegulated1_ == null) {
              encNotRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
            }
            input.ReadMessage(encNotRegulated1_);
            break;
          }
          case 34: {
            if (encNotRegulated2_ == null) {
              encNotRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
            }
            input.ReadMessage(encNotRegulated2_);
            break;
          }
          case 42: {
            if (encRegulated1_ == null) {
              encRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
            }
            input.ReadMessage(encRegulated1_);
            break;
          }
          case 50: {
            if (encRegulated2_ == null) {
              encRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
            }
            input.ReadMessage(encRegulated2_);
            break;
          }
          case 58: {
            if (encEmbeddedSystem_ == null) {
              encEmbeddedSystem_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem();
            }
            input.ReadMessage(encEmbeddedSystem_);
            break;
          }
          case 66: {
            if (encMotorController1_ == null) {
              encMotorController1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController1_);
            break;
          }
          case 74: {
            if (encMotorController2_ == null) {
              encMotorController2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController2_);
            break;
          }
          case 82: {
            if (encMotorController3_ == null) {
              encMotorController3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController3_);
            break;
          }
          case 90: {
            if (encMotorController4_ == null) {
              encMotorController4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController4_);
            break;
          }
          case 98: {
            if (encMotorController5_ == null) {
              encMotorController5_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController5_);
            break;
          }
          case 106: {
            if (encForwardLocomotive_ == null) {
              encForwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
            }
            input.ReadMessage(encForwardLocomotive_);
            break;
          }
          case 114: {
            if (encBackwardLocomotive_ == null) {
              encBackwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
            }
            input.ReadMessage(encBackwardLocomotive_);
            break;
          }
          case 122: {
            if (systemPumps_ == null) {
              systemPumps_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine();
            }
            input.ReadMessage(systemPumps_);
            break;
          }
          case 130: {
            if (encReactor_ == null) {
              encReactor_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor();
            }
            input.ReadMessage(encReactor_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnnelidaSensors message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UmbilicalReception : pb::IMessage<UmbilicalReception> {
        private static readonly pb::MessageParser<UmbilicalReception> _parser = new pb::MessageParser<UmbilicalReception>(() => new UmbilicalReception());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UmbilicalReception> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception(UmbilicalReception other) : this() {
          traction_ = other.traction_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception Clone() {
          return new UmbilicalReception(this);
        }

        /// <summary>Field number for the "traction" field.</summary>
        public const int TractionFieldNumber = 1;
        private uint traction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Traction {
          get { return traction_; }
          set {
            traction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UmbilicalReception);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UmbilicalReception other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Traction != other.Traction) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Traction != 0) hash ^= Traction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Traction != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Traction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Traction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Traction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UmbilicalReception other) {
          if (other == null) {
            return;
          }
          if (other.Traction != 0) {
            Traction = other.Traction;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Traction = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class NotRegulatedConverter : pb::IMessage<NotRegulatedConverter> {
        private static readonly pb::MessageParser<NotRegulatedConverter> _parser = new pb::MessageParser<NotRegulatedConverter>(() => new NotRegulatedConverter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NotRegulatedConverter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter(NotRegulatedConverter other) : this() {
          internalTemperature_ = other.internalTemperature_.Clone();
          internalPressure_ = other.internalPressure_.Clone();
          electricalCurrentC1_ = other.electricalCurrentC1_.Clone();
          electricalCurrentC2_ = other.electricalCurrentC2_.Clone();
          electricalCurrentC3_ = other.electricalCurrentC3_.Clone();
          electricalPowerP1_ = other.electricalPowerP1_.Clone();
          electricalPowerP2_ = other.electricalPowerP2_.Clone();
          electricalPowerP3_ = other.electricalPowerP3_.Clone();
          electricalTension700V_ = other.electricalTension700V_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter Clone() {
          return new NotRegulatedConverter(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_internalTemperature_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> internalTemperature_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalTemperature {
          get { return internalTemperature_; }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_internalPressure_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> internalPressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalPressure {
          get { return internalPressure_; }
        }

        /// <summary>Field number for the "electrical_current_c1" field.</summary>
        public const int ElectricalCurrentC1FieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC1_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> electricalCurrentC1_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC1 {
          get { return electricalCurrentC1_; }
        }

        /// <summary>Field number for the "electrical_current_c2" field.</summary>
        public const int ElectricalCurrentC2FieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC2_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> electricalCurrentC2_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC2 {
          get { return electricalCurrentC2_; }
        }

        /// <summary>Field number for the "electrical_current_c3" field.</summary>
        public const int ElectricalCurrentC3FieldNumber = 5;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC3_codec
            = pb::FieldCodec.ForFloat(42);
        private readonly pbc::RepeatedField<float> electricalCurrentC3_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC3 {
          get { return electricalCurrentC3_; }
        }

        /// <summary>Field number for the "electrical_power_p1" field.</summary>
        public const int ElectricalPowerP1FieldNumber = 6;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP1_codec
            = pb::FieldCodec.ForFloat(50);
        private readonly pbc::RepeatedField<float> electricalPowerP1_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP1 {
          get { return electricalPowerP1_; }
        }

        /// <summary>Field number for the "electrical_power_p2" field.</summary>
        public const int ElectricalPowerP2FieldNumber = 7;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP2_codec
            = pb::FieldCodec.ForFloat(58);
        private readonly pbc::RepeatedField<float> electricalPowerP2_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP2 {
          get { return electricalPowerP2_; }
        }

        /// <summary>Field number for the "electrical_power_p3" field.</summary>
        public const int ElectricalPowerP3FieldNumber = 8;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP3_codec
            = pb::FieldCodec.ForFloat(66);
        private readonly pbc::RepeatedField<float> electricalPowerP3_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP3 {
          get { return electricalPowerP3_; }
        }

        /// <summary>Field number for the "electrical_tension_700v" field.</summary>
        public const int ElectricalTension700VFieldNumber = 9;
        private static readonly pb::FieldCodec<float> _repeated_electricalTension700V_codec
            = pb::FieldCodec.ForFloat(74);
        private readonly pbc::RepeatedField<float> electricalTension700V_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalTension700V {
          get { return electricalTension700V_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NotRegulatedConverter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NotRegulatedConverter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!internalTemperature_.Equals(other.internalTemperature_)) return false;
          if(!internalPressure_.Equals(other.internalPressure_)) return false;
          if(!electricalCurrentC1_.Equals(other.electricalCurrentC1_)) return false;
          if(!electricalCurrentC2_.Equals(other.electricalCurrentC2_)) return false;
          if(!electricalCurrentC3_.Equals(other.electricalCurrentC3_)) return false;
          if(!electricalPowerP1_.Equals(other.electricalPowerP1_)) return false;
          if(!electricalPowerP2_.Equals(other.electricalPowerP2_)) return false;
          if(!electricalPowerP3_.Equals(other.electricalPowerP3_)) return false;
          if(!electricalTension700V_.Equals(other.electricalTension700V_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= internalTemperature_.GetHashCode();
          hash ^= internalPressure_.GetHashCode();
          hash ^= electricalCurrentC1_.GetHashCode();
          hash ^= electricalCurrentC2_.GetHashCode();
          hash ^= electricalCurrentC3_.GetHashCode();
          hash ^= electricalPowerP1_.GetHashCode();
          hash ^= electricalPowerP2_.GetHashCode();
          hash ^= electricalPowerP3_.GetHashCode();
          hash ^= electricalTension700V_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          internalTemperature_.WriteTo(output, _repeated_internalTemperature_codec);
          internalPressure_.WriteTo(output, _repeated_internalPressure_codec);
          electricalCurrentC1_.WriteTo(output, _repeated_electricalCurrentC1_codec);
          electricalCurrentC2_.WriteTo(output, _repeated_electricalCurrentC2_codec);
          electricalCurrentC3_.WriteTo(output, _repeated_electricalCurrentC3_codec);
          electricalPowerP1_.WriteTo(output, _repeated_electricalPowerP1_codec);
          electricalPowerP2_.WriteTo(output, _repeated_electricalPowerP2_codec);
          electricalPowerP3_.WriteTo(output, _repeated_electricalPowerP3_codec);
          electricalTension700V_.WriteTo(output, _repeated_electricalTension700V_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += internalTemperature_.CalculateSize(_repeated_internalTemperature_codec);
          size += internalPressure_.CalculateSize(_repeated_internalPressure_codec);
          size += electricalCurrentC1_.CalculateSize(_repeated_electricalCurrentC1_codec);
          size += electricalCurrentC2_.CalculateSize(_repeated_electricalCurrentC2_codec);
          size += electricalCurrentC3_.CalculateSize(_repeated_electricalCurrentC3_codec);
          size += electricalPowerP1_.CalculateSize(_repeated_electricalPowerP1_codec);
          size += electricalPowerP2_.CalculateSize(_repeated_electricalPowerP2_codec);
          size += electricalPowerP3_.CalculateSize(_repeated_electricalPowerP3_codec);
          size += electricalTension700V_.CalculateSize(_repeated_electricalTension700V_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NotRegulatedConverter other) {
          if (other == null) {
            return;
          }
          internalTemperature_.Add(other.internalTemperature_);
          internalPressure_.Add(other.internalPressure_);
          electricalCurrentC1_.Add(other.electricalCurrentC1_);
          electricalCurrentC2_.Add(other.electricalCurrentC2_);
          electricalCurrentC3_.Add(other.electricalCurrentC3_);
          electricalPowerP1_.Add(other.electricalPowerP1_);
          electricalPowerP2_.Add(other.electricalPowerP2_);
          electricalPowerP3_.Add(other.electricalPowerP3_);
          electricalTension700V_.Add(other.electricalTension700V_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                internalTemperature_.AddEntriesFrom(input, _repeated_internalTemperature_codec);
                break;
              }
              case 18:
              case 21: {
                internalPressure_.AddEntriesFrom(input, _repeated_internalPressure_codec);
                break;
              }
              case 26:
              case 29: {
                electricalCurrentC1_.AddEntriesFrom(input, _repeated_electricalCurrentC1_codec);
                break;
              }
              case 34:
              case 37: {
                electricalCurrentC2_.AddEntriesFrom(input, _repeated_electricalCurrentC2_codec);
                break;
              }
              case 42:
              case 45: {
                electricalCurrentC3_.AddEntriesFrom(input, _repeated_electricalCurrentC3_codec);
                break;
              }
              case 50:
              case 53: {
                electricalPowerP1_.AddEntriesFrom(input, _repeated_electricalPowerP1_codec);
                break;
              }
              case 58:
              case 61: {
                electricalPowerP2_.AddEntriesFrom(input, _repeated_electricalPowerP2_codec);
                break;
              }
              case 66:
              case 69: {
                electricalPowerP3_.AddEntriesFrom(input, _repeated_electricalPowerP3_codec);
                break;
              }
              case 74:
              case 77: {
                electricalTension700V_.AddEntriesFrom(input, _repeated_electricalTension700V_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class RegulatedConverter : pb::IMessage<RegulatedConverter> {
        private static readonly pb::MessageParser<RegulatedConverter> _parser = new pb::MessageParser<RegulatedConverter>(() => new RegulatedConverter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RegulatedConverter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter(RegulatedConverter other) : this() {
          internalTemperature_ = other.internalTemperature_.Clone();
          internalPressure_ = other.internalPressure_.Clone();
          electricalCurrentC1_ = other.electricalCurrentC1_.Clone();
          electricalCurrentC2_ = other.electricalCurrentC2_.Clone();
          electricalCurrentC3_ = other.electricalCurrentC3_.Clone();
          electricalCurrentC4_ = other.electricalCurrentC4_.Clone();
          electricalPowerP1_ = other.electricalPowerP1_.Clone();
          electricalPowerP2_ = other.electricalPowerP2_.Clone();
          electricalPowerP3_ = other.electricalPowerP3_.Clone();
          electricalPowerP4_ = other.electricalPowerP4_.Clone();
          electricalTension_ = other.electricalTension_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter Clone() {
          return new RegulatedConverter(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_internalTemperature_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> internalTemperature_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalTemperature {
          get { return internalTemperature_; }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_internalPressure_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> internalPressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalPressure {
          get { return internalPressure_; }
        }

        /// <summary>Field number for the "electrical_current_c1" field.</summary>
        public const int ElectricalCurrentC1FieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC1_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> electricalCurrentC1_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC1 {
          get { return electricalCurrentC1_; }
        }

        /// <summary>Field number for the "electrical_current_c2" field.</summary>
        public const int ElectricalCurrentC2FieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC2_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> electricalCurrentC2_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC2 {
          get { return electricalCurrentC2_; }
        }

        /// <summary>Field number for the "electrical_current_c3" field.</summary>
        public const int ElectricalCurrentC3FieldNumber = 5;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC3_codec
            = pb::FieldCodec.ForFloat(42);
        private readonly pbc::RepeatedField<float> electricalCurrentC3_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC3 {
          get { return electricalCurrentC3_; }
        }

        /// <summary>Field number for the "electrical_current_c4" field.</summary>
        public const int ElectricalCurrentC4FieldNumber = 6;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrentC4_codec
            = pb::FieldCodec.ForFloat(50);
        private readonly pbc::RepeatedField<float> electricalCurrentC4_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrentC4 {
          get { return electricalCurrentC4_; }
        }

        /// <summary>Field number for the "electrical_power_p1" field.</summary>
        public const int ElectricalPowerP1FieldNumber = 7;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP1_codec
            = pb::FieldCodec.ForFloat(58);
        private readonly pbc::RepeatedField<float> electricalPowerP1_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP1 {
          get { return electricalPowerP1_; }
        }

        /// <summary>Field number for the "electrical_power_p2" field.</summary>
        public const int ElectricalPowerP2FieldNumber = 8;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP2_codec
            = pb::FieldCodec.ForFloat(66);
        private readonly pbc::RepeatedField<float> electricalPowerP2_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP2 {
          get { return electricalPowerP2_; }
        }

        /// <summary>Field number for the "electrical_power_p3" field.</summary>
        public const int ElectricalPowerP3FieldNumber = 9;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP3_codec
            = pb::FieldCodec.ForFloat(74);
        private readonly pbc::RepeatedField<float> electricalPowerP3_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP3 {
          get { return electricalPowerP3_; }
        }

        /// <summary>Field number for the "electrical_power_p4" field.</summary>
        public const int ElectricalPowerP4FieldNumber = 10;
        private static readonly pb::FieldCodec<float> _repeated_electricalPowerP4_codec
            = pb::FieldCodec.ForFloat(82);
        private readonly pbc::RepeatedField<float> electricalPowerP4_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalPowerP4 {
          get { return electricalPowerP4_; }
        }

        /// <summary>Field number for the "electrical_tension" field.</summary>
        public const int ElectricalTensionFieldNumber = 11;
        private static readonly pb::FieldCodec<float> _repeated_electricalTension_codec
            = pb::FieldCodec.ForFloat(90);
        private readonly pbc::RepeatedField<float> electricalTension_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalTension {
          get { return electricalTension_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RegulatedConverter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RegulatedConverter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!internalTemperature_.Equals(other.internalTemperature_)) return false;
          if(!internalPressure_.Equals(other.internalPressure_)) return false;
          if(!electricalCurrentC1_.Equals(other.electricalCurrentC1_)) return false;
          if(!electricalCurrentC2_.Equals(other.electricalCurrentC2_)) return false;
          if(!electricalCurrentC3_.Equals(other.electricalCurrentC3_)) return false;
          if(!electricalCurrentC4_.Equals(other.electricalCurrentC4_)) return false;
          if(!electricalPowerP1_.Equals(other.electricalPowerP1_)) return false;
          if(!electricalPowerP2_.Equals(other.electricalPowerP2_)) return false;
          if(!electricalPowerP3_.Equals(other.electricalPowerP3_)) return false;
          if(!electricalPowerP4_.Equals(other.electricalPowerP4_)) return false;
          if(!electricalTension_.Equals(other.electricalTension_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= internalTemperature_.GetHashCode();
          hash ^= internalPressure_.GetHashCode();
          hash ^= electricalCurrentC1_.GetHashCode();
          hash ^= electricalCurrentC2_.GetHashCode();
          hash ^= electricalCurrentC3_.GetHashCode();
          hash ^= electricalCurrentC4_.GetHashCode();
          hash ^= electricalPowerP1_.GetHashCode();
          hash ^= electricalPowerP2_.GetHashCode();
          hash ^= electricalPowerP3_.GetHashCode();
          hash ^= electricalPowerP4_.GetHashCode();
          hash ^= electricalTension_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          internalTemperature_.WriteTo(output, _repeated_internalTemperature_codec);
          internalPressure_.WriteTo(output, _repeated_internalPressure_codec);
          electricalCurrentC1_.WriteTo(output, _repeated_electricalCurrentC1_codec);
          electricalCurrentC2_.WriteTo(output, _repeated_electricalCurrentC2_codec);
          electricalCurrentC3_.WriteTo(output, _repeated_electricalCurrentC3_codec);
          electricalCurrentC4_.WriteTo(output, _repeated_electricalCurrentC4_codec);
          electricalPowerP1_.WriteTo(output, _repeated_electricalPowerP1_codec);
          electricalPowerP2_.WriteTo(output, _repeated_electricalPowerP2_codec);
          electricalPowerP3_.WriteTo(output, _repeated_electricalPowerP3_codec);
          electricalPowerP4_.WriteTo(output, _repeated_electricalPowerP4_codec);
          electricalTension_.WriteTo(output, _repeated_electricalTension_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += internalTemperature_.CalculateSize(_repeated_internalTemperature_codec);
          size += internalPressure_.CalculateSize(_repeated_internalPressure_codec);
          size += electricalCurrentC1_.CalculateSize(_repeated_electricalCurrentC1_codec);
          size += electricalCurrentC2_.CalculateSize(_repeated_electricalCurrentC2_codec);
          size += electricalCurrentC3_.CalculateSize(_repeated_electricalCurrentC3_codec);
          size += electricalCurrentC4_.CalculateSize(_repeated_electricalCurrentC4_codec);
          size += electricalPowerP1_.CalculateSize(_repeated_electricalPowerP1_codec);
          size += electricalPowerP2_.CalculateSize(_repeated_electricalPowerP2_codec);
          size += electricalPowerP3_.CalculateSize(_repeated_electricalPowerP3_codec);
          size += electricalPowerP4_.CalculateSize(_repeated_electricalPowerP4_codec);
          size += electricalTension_.CalculateSize(_repeated_electricalTension_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RegulatedConverter other) {
          if (other == null) {
            return;
          }
          internalTemperature_.Add(other.internalTemperature_);
          internalPressure_.Add(other.internalPressure_);
          electricalCurrentC1_.Add(other.electricalCurrentC1_);
          electricalCurrentC2_.Add(other.electricalCurrentC2_);
          electricalCurrentC3_.Add(other.electricalCurrentC3_);
          electricalCurrentC4_.Add(other.electricalCurrentC4_);
          electricalPowerP1_.Add(other.electricalPowerP1_);
          electricalPowerP2_.Add(other.electricalPowerP2_);
          electricalPowerP3_.Add(other.electricalPowerP3_);
          electricalPowerP4_.Add(other.electricalPowerP4_);
          electricalTension_.Add(other.electricalTension_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                internalTemperature_.AddEntriesFrom(input, _repeated_internalTemperature_codec);
                break;
              }
              case 18:
              case 21: {
                internalPressure_.AddEntriesFrom(input, _repeated_internalPressure_codec);
                break;
              }
              case 26:
              case 29: {
                electricalCurrentC1_.AddEntriesFrom(input, _repeated_electricalCurrentC1_codec);
                break;
              }
              case 34:
              case 37: {
                electricalCurrentC2_.AddEntriesFrom(input, _repeated_electricalCurrentC2_codec);
                break;
              }
              case 42:
              case 45: {
                electricalCurrentC3_.AddEntriesFrom(input, _repeated_electricalCurrentC3_codec);
                break;
              }
              case 50:
              case 53: {
                electricalCurrentC4_.AddEntriesFrom(input, _repeated_electricalCurrentC4_codec);
                break;
              }
              case 58:
              case 61: {
                electricalPowerP1_.AddEntriesFrom(input, _repeated_electricalPowerP1_codec);
                break;
              }
              case 66:
              case 69: {
                electricalPowerP2_.AddEntriesFrom(input, _repeated_electricalPowerP2_codec);
                break;
              }
              case 74:
              case 77: {
                electricalPowerP3_.AddEntriesFrom(input, _repeated_electricalPowerP3_codec);
                break;
              }
              case 82:
              case 85: {
                electricalPowerP4_.AddEntriesFrom(input, _repeated_electricalPowerP4_codec);
                break;
              }
              case 90:
              case 93: {
                electricalTension_.AddEntriesFrom(input, _repeated_electricalTension_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class EmbeddedSystem : pb::IMessage<EmbeddedSystem> {
        private static readonly pb::MessageParser<EmbeddedSystem> _parser = new pb::MessageParser<EmbeddedSystem>(() => new EmbeddedSystem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbeddedSystem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem(EmbeddedSystem other) : this() {
          internalTemperature_ = other.internalTemperature_.Clone();
          internalPressure_ = other.internalPressure_.Clone();
          externalModulePressure_ = other.externalModulePressure_.Clone();
          rotationX_ = other.rotationX_.Clone();
          rotationY_ = other.rotationY_.Clone();
          rotationZ_ = other.rotationZ_.Clone();
          displacementX_ = other.displacementX_.Clone();
          displacementY_ = other.displacementY_.Clone();
          displacementZ_ = other.displacementZ_.Clone();
          accelerationX_ = other.accelerationX_.Clone();
          accelerationY_ = other.accelerationY_.Clone();
          accelerationZ_ = other.accelerationZ_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem Clone() {
          return new EmbeddedSystem(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_internalTemperature_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> internalTemperature_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalTemperature {
          get { return internalTemperature_; }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_internalPressure_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> internalPressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalPressure {
          get { return internalPressure_; }
        }

        /// <summary>Field number for the "external_module_pressure" field.</summary>
        public const int ExternalModulePressureFieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_externalModulePressure_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> externalModulePressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ExternalModulePressure {
          get { return externalModulePressure_; }
        }

        /// <summary>Field number for the "rotation_x" field.</summary>
        public const int RotationXFieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_rotationX_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> rotationX_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> RotationX {
          get { return rotationX_; }
        }

        /// <summary>Field number for the "rotation_y" field.</summary>
        public const int RotationYFieldNumber = 5;
        private static readonly pb::FieldCodec<float> _repeated_rotationY_codec
            = pb::FieldCodec.ForFloat(42);
        private readonly pbc::RepeatedField<float> rotationY_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> RotationY {
          get { return rotationY_; }
        }

        /// <summary>Field number for the "rotation_z" field.</summary>
        public const int RotationZFieldNumber = 6;
        private static readonly pb::FieldCodec<float> _repeated_rotationZ_codec
            = pb::FieldCodec.ForFloat(50);
        private readonly pbc::RepeatedField<float> rotationZ_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> RotationZ {
          get { return rotationZ_; }
        }

        /// <summary>Field number for the "displacement_x" field.</summary>
        public const int DisplacementXFieldNumber = 7;
        private static readonly pb::FieldCodec<float> _repeated_displacementX_codec
            = pb::FieldCodec.ForFloat(58);
        private readonly pbc::RepeatedField<float> displacementX_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> DisplacementX {
          get { return displacementX_; }
        }

        /// <summary>Field number for the "displacement_y" field.</summary>
        public const int DisplacementYFieldNumber = 8;
        private static readonly pb::FieldCodec<float> _repeated_displacementY_codec
            = pb::FieldCodec.ForFloat(66);
        private readonly pbc::RepeatedField<float> displacementY_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> DisplacementY {
          get { return displacementY_; }
        }

        /// <summary>Field number for the "displacement_z" field.</summary>
        public const int DisplacementZFieldNumber = 9;
        private static readonly pb::FieldCodec<float> _repeated_displacementZ_codec
            = pb::FieldCodec.ForFloat(74);
        private readonly pbc::RepeatedField<float> displacementZ_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> DisplacementZ {
          get { return displacementZ_; }
        }

        /// <summary>Field number for the "acceleration_x" field.</summary>
        public const int AccelerationXFieldNumber = 10;
        private static readonly pb::FieldCodec<float> _repeated_accelerationX_codec
            = pb::FieldCodec.ForFloat(82);
        private readonly pbc::RepeatedField<float> accelerationX_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> AccelerationX {
          get { return accelerationX_; }
        }

        /// <summary>Field number for the "acceleration_y" field.</summary>
        public const int AccelerationYFieldNumber = 11;
        private static readonly pb::FieldCodec<float> _repeated_accelerationY_codec
            = pb::FieldCodec.ForFloat(90);
        private readonly pbc::RepeatedField<float> accelerationY_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> AccelerationY {
          get { return accelerationY_; }
        }

        /// <summary>Field number for the "acceleration_z" field.</summary>
        public const int AccelerationZFieldNumber = 12;
        private static readonly pb::FieldCodec<float> _repeated_accelerationZ_codec
            = pb::FieldCodec.ForFloat(98);
        private readonly pbc::RepeatedField<float> accelerationZ_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> AccelerationZ {
          get { return accelerationZ_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbeddedSystem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbeddedSystem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!internalTemperature_.Equals(other.internalTemperature_)) return false;
          if(!internalPressure_.Equals(other.internalPressure_)) return false;
          if(!externalModulePressure_.Equals(other.externalModulePressure_)) return false;
          if(!rotationX_.Equals(other.rotationX_)) return false;
          if(!rotationY_.Equals(other.rotationY_)) return false;
          if(!rotationZ_.Equals(other.rotationZ_)) return false;
          if(!displacementX_.Equals(other.displacementX_)) return false;
          if(!displacementY_.Equals(other.displacementY_)) return false;
          if(!displacementZ_.Equals(other.displacementZ_)) return false;
          if(!accelerationX_.Equals(other.accelerationX_)) return false;
          if(!accelerationY_.Equals(other.accelerationY_)) return false;
          if(!accelerationZ_.Equals(other.accelerationZ_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= internalTemperature_.GetHashCode();
          hash ^= internalPressure_.GetHashCode();
          hash ^= externalModulePressure_.GetHashCode();
          hash ^= rotationX_.GetHashCode();
          hash ^= rotationY_.GetHashCode();
          hash ^= rotationZ_.GetHashCode();
          hash ^= displacementX_.GetHashCode();
          hash ^= displacementY_.GetHashCode();
          hash ^= displacementZ_.GetHashCode();
          hash ^= accelerationX_.GetHashCode();
          hash ^= accelerationY_.GetHashCode();
          hash ^= accelerationZ_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          internalTemperature_.WriteTo(output, _repeated_internalTemperature_codec);
          internalPressure_.WriteTo(output, _repeated_internalPressure_codec);
          externalModulePressure_.WriteTo(output, _repeated_externalModulePressure_codec);
          rotationX_.WriteTo(output, _repeated_rotationX_codec);
          rotationY_.WriteTo(output, _repeated_rotationY_codec);
          rotationZ_.WriteTo(output, _repeated_rotationZ_codec);
          displacementX_.WriteTo(output, _repeated_displacementX_codec);
          displacementY_.WriteTo(output, _repeated_displacementY_codec);
          displacementZ_.WriteTo(output, _repeated_displacementZ_codec);
          accelerationX_.WriteTo(output, _repeated_accelerationX_codec);
          accelerationY_.WriteTo(output, _repeated_accelerationY_codec);
          accelerationZ_.WriteTo(output, _repeated_accelerationZ_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += internalTemperature_.CalculateSize(_repeated_internalTemperature_codec);
          size += internalPressure_.CalculateSize(_repeated_internalPressure_codec);
          size += externalModulePressure_.CalculateSize(_repeated_externalModulePressure_codec);
          size += rotationX_.CalculateSize(_repeated_rotationX_codec);
          size += rotationY_.CalculateSize(_repeated_rotationY_codec);
          size += rotationZ_.CalculateSize(_repeated_rotationZ_codec);
          size += displacementX_.CalculateSize(_repeated_displacementX_codec);
          size += displacementY_.CalculateSize(_repeated_displacementY_codec);
          size += displacementZ_.CalculateSize(_repeated_displacementZ_codec);
          size += accelerationX_.CalculateSize(_repeated_accelerationX_codec);
          size += accelerationY_.CalculateSize(_repeated_accelerationY_codec);
          size += accelerationZ_.CalculateSize(_repeated_accelerationZ_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbeddedSystem other) {
          if (other == null) {
            return;
          }
          internalTemperature_.Add(other.internalTemperature_);
          internalPressure_.Add(other.internalPressure_);
          externalModulePressure_.Add(other.externalModulePressure_);
          rotationX_.Add(other.rotationX_);
          rotationY_.Add(other.rotationY_);
          rotationZ_.Add(other.rotationZ_);
          displacementX_.Add(other.displacementX_);
          displacementY_.Add(other.displacementY_);
          displacementZ_.Add(other.displacementZ_);
          accelerationX_.Add(other.accelerationX_);
          accelerationY_.Add(other.accelerationY_);
          accelerationZ_.Add(other.accelerationZ_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                internalTemperature_.AddEntriesFrom(input, _repeated_internalTemperature_codec);
                break;
              }
              case 18:
              case 21: {
                internalPressure_.AddEntriesFrom(input, _repeated_internalPressure_codec);
                break;
              }
              case 26:
              case 29: {
                externalModulePressure_.AddEntriesFrom(input, _repeated_externalModulePressure_codec);
                break;
              }
              case 34:
              case 37: {
                rotationX_.AddEntriesFrom(input, _repeated_rotationX_codec);
                break;
              }
              case 42:
              case 45: {
                rotationY_.AddEntriesFrom(input, _repeated_rotationY_codec);
                break;
              }
              case 50:
              case 53: {
                rotationZ_.AddEntriesFrom(input, _repeated_rotationZ_codec);
                break;
              }
              case 58:
              case 61: {
                displacementX_.AddEntriesFrom(input, _repeated_displacementX_codec);
                break;
              }
              case 66:
              case 69: {
                displacementY_.AddEntriesFrom(input, _repeated_displacementY_codec);
                break;
              }
              case 74:
              case 77: {
                displacementZ_.AddEntriesFrom(input, _repeated_displacementZ_codec);
                break;
              }
              case 82:
              case 85: {
                accelerationX_.AddEntriesFrom(input, _repeated_accelerationX_codec);
                break;
              }
              case 90:
              case 93: {
                accelerationY_.AddEntriesFrom(input, _repeated_accelerationY_codec);
                break;
              }
              case 98:
              case 101: {
                accelerationZ_.AddEntriesFrom(input, _repeated_accelerationZ_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class MotorController : pb::IMessage<MotorController> {
        private static readonly pb::MessageParser<MotorController> _parser = new pb::MessageParser<MotorController>(() => new MotorController());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MotorController> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController(MotorController other) : this() {
          internalTemperature_ = other.internalTemperature_.Clone();
          internalPressure_ = other.internalPressure_.Clone();
          electricalCurrent_ = other.electricalCurrent_.Clone();
          electricalTension_ = other.electricalTension_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController Clone() {
          return new MotorController(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_internalTemperature_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> internalTemperature_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalTemperature {
          get { return internalTemperature_; }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_internalPressure_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> internalPressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> InternalPressure {
          get { return internalPressure_; }
        }

        /// <summary>Field number for the "electrical_current" field.</summary>
        public const int ElectricalCurrentFieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_electricalCurrent_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> electricalCurrent_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalCurrent {
          get { return electricalCurrent_; }
        }

        /// <summary>Field number for the "electrical_tension" field.</summary>
        public const int ElectricalTensionFieldNumber = 4;
        private static readonly pb::FieldCodec<float> _repeated_electricalTension_codec
            = pb::FieldCodec.ForFloat(34);
        private readonly pbc::RepeatedField<float> electricalTension_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ElectricalTension {
          get { return electricalTension_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MotorController);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MotorController other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!internalTemperature_.Equals(other.internalTemperature_)) return false;
          if(!internalPressure_.Equals(other.internalPressure_)) return false;
          if(!electricalCurrent_.Equals(other.electricalCurrent_)) return false;
          if(!electricalTension_.Equals(other.electricalTension_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= internalTemperature_.GetHashCode();
          hash ^= internalPressure_.GetHashCode();
          hash ^= electricalCurrent_.GetHashCode();
          hash ^= electricalTension_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          internalTemperature_.WriteTo(output, _repeated_internalTemperature_codec);
          internalPressure_.WriteTo(output, _repeated_internalPressure_codec);
          electricalCurrent_.WriteTo(output, _repeated_electricalCurrent_codec);
          electricalTension_.WriteTo(output, _repeated_electricalTension_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += internalTemperature_.CalculateSize(_repeated_internalTemperature_codec);
          size += internalPressure_.CalculateSize(_repeated_internalPressure_codec);
          size += electricalCurrent_.CalculateSize(_repeated_electricalCurrent_codec);
          size += electricalTension_.CalculateSize(_repeated_electricalTension_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MotorController other) {
          if (other == null) {
            return;
          }
          internalTemperature_.Add(other.internalTemperature_);
          internalPressure_.Add(other.internalPressure_);
          electricalCurrent_.Add(other.electricalCurrent_);
          electricalTension_.Add(other.electricalTension_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                internalTemperature_.AddEntriesFrom(input, _repeated_internalTemperature_codec);
                break;
              }
              case 18:
              case 21: {
                internalPressure_.AddEntriesFrom(input, _repeated_internalPressure_codec);
                break;
              }
              case 26:
              case 29: {
                electricalCurrent_.AddEntriesFrom(input, _repeated_electricalCurrent_codec);
                break;
              }
              case 34:
              case 37: {
                electricalTension_.AddEntriesFrom(input, _repeated_electricalTension_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Locomotive : pb::IMessage<Locomotive> {
        private static readonly pb::MessageParser<Locomotive> _parser = new pb::MessageParser<Locomotive>(() => new Locomotive());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Locomotive> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive(Locomotive other) : this() {
          cylinderForward_ = other.cylinderForward_.Clone();
          cylinderBackward_ = other.cylinderBackward_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive Clone() {
          return new Locomotive(this);
        }

        /// <summary>Field number for the "cylinder_forward" field.</summary>
        public const int CylinderForwardFieldNumber = 1;
        private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> _repeated_cylinderForward_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.CylinderState) x);
        private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> cylinderForward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> CylinderForward {
          get { return cylinderForward_; }
        }

        /// <summary>Field number for the "cylinder_backward" field.</summary>
        public const int CylinderBackwardFieldNumber = 2;
        private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> _repeated_cylinderBackward_codec
            = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.CylinderState) x);
        private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> cylinderBackward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.CylinderState> CylinderBackward {
          get { return cylinderBackward_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Locomotive);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Locomotive other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!cylinderForward_.Equals(other.cylinderForward_)) return false;
          if(!cylinderBackward_.Equals(other.cylinderBackward_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= cylinderForward_.GetHashCode();
          hash ^= cylinderBackward_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          cylinderForward_.WriteTo(output, _repeated_cylinderForward_codec);
          cylinderBackward_.WriteTo(output, _repeated_cylinderBackward_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += cylinderForward_.CalculateSize(_repeated_cylinderForward_codec);
          size += cylinderBackward_.CalculateSize(_repeated_cylinderBackward_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Locomotive other) {
          if (other == null) {
            return;
          }
          cylinderForward_.Add(other.cylinderForward_);
          cylinderBackward_.Add(other.cylinderBackward_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                cylinderForward_.AddEntriesFrom(input, _repeated_cylinderForward_codec);
                break;
              }
              case 18:
              case 16: {
                cylinderBackward_.AddEntriesFrom(input, _repeated_cylinderBackward_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class PumpsEngine : pb::IMessage<PumpsEngine> {
        private static readonly pb::MessageParser<PumpsEngine> _parser = new pb::MessageParser<PumpsEngine>(() => new PumpsEngine());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PumpsEngine> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine(PumpsEngine other) : this() {
          EncManifold1Backward = other.encManifold1Backward_ != null ? other.EncManifold1Backward.Clone() : null;
          EncManifold3Backward = other.encManifold3Backward_ != null ? other.EncManifold3Backward.Clone() : null;
          EncMotorBomb1 = other.encMotorBomb1_ != null ? other.EncMotorBomb1.Clone() : null;
          EncMotorBomb2 = other.encMotorBomb2_ != null ? other.EncMotorBomb2.Clone() : null;
          EncManifold2Auxiliar = other.encManifold2Auxiliar_ != null ? other.EncManifold2Auxiliar.Clone() : null;
          EncMotorBombAuxiliar = other.encMotorBombAuxiliar_ != null ? other.EncMotorBombAuxiliar.Clone() : null;
          EncManifold2Main = other.encManifold2Main_ != null ? other.EncManifold2Main.Clone() : null;
          EncMotorBomb3 = other.encMotorBomb3_ != null ? other.EncMotorBomb3.Clone() : null;
          EncMotorBomb4 = other.encMotorBomb4_ != null ? other.EncMotorBomb4.Clone() : null;
          EncManifold3Forward = other.encManifold3Forward_ != null ? other.EncManifold3Forward.Clone() : null;
          EncManifold1Forward = other.encManifold1Forward_ != null ? other.EncManifold1Forward.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine Clone() {
          return new PumpsEngine(this);
        }

        /// <summary>Field number for the "enc_manifold_1_backward" field.</summary>
        public const int EncManifold1BackwardFieldNumber = 1;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward encManifold1Backward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward EncManifold1Backward {
          get { return encManifold1Backward_; }
          set {
            encManifold1Backward_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_3_backward" field.</summary>
        public const int EncManifold3BackwardFieldNumber = 2;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward encManifold3Backward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward EncManifold3Backward {
          get { return encManifold3Backward_; }
          set {
            encManifold3Backward_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_1" field.</summary>
        public const int EncMotorBomb1FieldNumber = 3;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1 encMotorBomb1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1 EncMotorBomb1 {
          get { return encMotorBomb1_; }
          set {
            encMotorBomb1_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_2" field.</summary>
        public const int EncMotorBomb2FieldNumber = 4;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2 encMotorBomb2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2 EncMotorBomb2 {
          get { return encMotorBomb2_; }
          set {
            encMotorBomb2_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_2_auxiliar" field.</summary>
        public const int EncManifold2AuxiliarFieldNumber = 5;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar encManifold2Auxiliar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar EncManifold2Auxiliar {
          get { return encManifold2Auxiliar_; }
          set {
            encManifold2Auxiliar_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_auxiliar" field.</summary>
        public const int EncMotorBombAuxiliarFieldNumber = 6;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar encMotorBombAuxiliar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar EncMotorBombAuxiliar {
          get { return encMotorBombAuxiliar_; }
          set {
            encMotorBombAuxiliar_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_2_main" field.</summary>
        public const int EncManifold2MainFieldNumber = 7;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main encManifold2Main_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main EncManifold2Main {
          get { return encManifold2Main_; }
          set {
            encManifold2Main_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_3" field.</summary>
        public const int EncMotorBomb3FieldNumber = 8;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3 encMotorBomb3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3 EncMotorBomb3 {
          get { return encMotorBomb3_; }
          set {
            encMotorBomb3_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_4" field.</summary>
        public const int EncMotorBomb4FieldNumber = 9;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4 encMotorBomb4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4 EncMotorBomb4 {
          get { return encMotorBomb4_; }
          set {
            encMotorBomb4_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_3_forward" field.</summary>
        public const int EncManifold3ForwardFieldNumber = 10;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward encManifold3Forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward EncManifold3Forward {
          get { return encManifold3Forward_; }
          set {
            encManifold3Forward_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_1_forward" field.</summary>
        public const int EncManifold1ForwardFieldNumber = 11;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward encManifold1Forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward EncManifold1Forward {
          get { return encManifold1Forward_; }
          set {
            encManifold1Forward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PumpsEngine);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PumpsEngine other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(EncManifold1Backward, other.EncManifold1Backward)) return false;
          if (!object.Equals(EncManifold3Backward, other.EncManifold3Backward)) return false;
          if (!object.Equals(EncMotorBomb1, other.EncMotorBomb1)) return false;
          if (!object.Equals(EncMotorBomb2, other.EncMotorBomb2)) return false;
          if (!object.Equals(EncManifold2Auxiliar, other.EncManifold2Auxiliar)) return false;
          if (!object.Equals(EncMotorBombAuxiliar, other.EncMotorBombAuxiliar)) return false;
          if (!object.Equals(EncManifold2Main, other.EncManifold2Main)) return false;
          if (!object.Equals(EncMotorBomb3, other.EncMotorBomb3)) return false;
          if (!object.Equals(EncMotorBomb4, other.EncMotorBomb4)) return false;
          if (!object.Equals(EncManifold3Forward, other.EncManifold3Forward)) return false;
          if (!object.Equals(EncManifold1Forward, other.EncManifold1Forward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (encManifold1Backward_ != null) hash ^= EncManifold1Backward.GetHashCode();
          if (encManifold3Backward_ != null) hash ^= EncManifold3Backward.GetHashCode();
          if (encMotorBomb1_ != null) hash ^= EncMotorBomb1.GetHashCode();
          if (encMotorBomb2_ != null) hash ^= EncMotorBomb2.GetHashCode();
          if (encManifold2Auxiliar_ != null) hash ^= EncManifold2Auxiliar.GetHashCode();
          if (encMotorBombAuxiliar_ != null) hash ^= EncMotorBombAuxiliar.GetHashCode();
          if (encManifold2Main_ != null) hash ^= EncManifold2Main.GetHashCode();
          if (encMotorBomb3_ != null) hash ^= EncMotorBomb3.GetHashCode();
          if (encMotorBomb4_ != null) hash ^= EncMotorBomb4.GetHashCode();
          if (encManifold3Forward_ != null) hash ^= EncManifold3Forward.GetHashCode();
          if (encManifold1Forward_ != null) hash ^= EncManifold1Forward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (encManifold1Backward_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(EncManifold1Backward);
          }
          if (encManifold3Backward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EncManifold3Backward);
          }
          if (encMotorBomb1_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(EncMotorBomb1);
          }
          if (encMotorBomb2_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EncMotorBomb2);
          }
          if (encManifold2Auxiliar_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(EncManifold2Auxiliar);
          }
          if (encMotorBombAuxiliar_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(EncMotorBombAuxiliar);
          }
          if (encManifold2Main_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(EncManifold2Main);
          }
          if (encMotorBomb3_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(EncMotorBomb3);
          }
          if (encMotorBomb4_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(EncMotorBomb4);
          }
          if (encManifold3Forward_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(EncManifold3Forward);
          }
          if (encManifold1Forward_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(EncManifold1Forward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (encManifold1Backward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold1Backward);
          }
          if (encManifold3Backward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold3Backward);
          }
          if (encMotorBomb1_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb1);
          }
          if (encMotorBomb2_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb2);
          }
          if (encManifold2Auxiliar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold2Auxiliar);
          }
          if (encMotorBombAuxiliar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBombAuxiliar);
          }
          if (encManifold2Main_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold2Main);
          }
          if (encMotorBomb3_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb3);
          }
          if (encMotorBomb4_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb4);
          }
          if (encManifold3Forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold3Forward);
          }
          if (encManifold1Forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold1Forward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PumpsEngine other) {
          if (other == null) {
            return;
          }
          if (other.encManifold1Backward_ != null) {
            if (encManifold1Backward_ == null) {
              encManifold1Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward();
            }
            EncManifold1Backward.MergeFrom(other.EncManifold1Backward);
          }
          if (other.encManifold3Backward_ != null) {
            if (encManifold3Backward_ == null) {
              encManifold3Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward();
            }
            EncManifold3Backward.MergeFrom(other.EncManifold3Backward);
          }
          if (other.encMotorBomb1_ != null) {
            if (encMotorBomb1_ == null) {
              encMotorBomb1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1();
            }
            EncMotorBomb1.MergeFrom(other.EncMotorBomb1);
          }
          if (other.encMotorBomb2_ != null) {
            if (encMotorBomb2_ == null) {
              encMotorBomb2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2();
            }
            EncMotorBomb2.MergeFrom(other.EncMotorBomb2);
          }
          if (other.encManifold2Auxiliar_ != null) {
            if (encManifold2Auxiliar_ == null) {
              encManifold2Auxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar();
            }
            EncManifold2Auxiliar.MergeFrom(other.EncManifold2Auxiliar);
          }
          if (other.encMotorBombAuxiliar_ != null) {
            if (encMotorBombAuxiliar_ == null) {
              encMotorBombAuxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar();
            }
            EncMotorBombAuxiliar.MergeFrom(other.EncMotorBombAuxiliar);
          }
          if (other.encManifold2Main_ != null) {
            if (encManifold2Main_ == null) {
              encManifold2Main_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main();
            }
            EncManifold2Main.MergeFrom(other.EncManifold2Main);
          }
          if (other.encMotorBomb3_ != null) {
            if (encMotorBomb3_ == null) {
              encMotorBomb3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3();
            }
            EncMotorBomb3.MergeFrom(other.EncMotorBomb3);
          }
          if (other.encMotorBomb4_ != null) {
            if (encMotorBomb4_ == null) {
              encMotorBomb4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4();
            }
            EncMotorBomb4.MergeFrom(other.EncMotorBomb4);
          }
          if (other.encManifold3Forward_ != null) {
            if (encManifold3Forward_ == null) {
              encManifold3Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward();
            }
            EncManifold3Forward.MergeFrom(other.EncManifold3Forward);
          }
          if (other.encManifold1Forward_ != null) {
            if (encManifold1Forward_ == null) {
              encManifold1Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward();
            }
            EncManifold1Forward.MergeFrom(other.EncManifold1Forward);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (encManifold1Backward_ == null) {
                  encManifold1Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward();
                }
                input.ReadMessage(encManifold1Backward_);
                break;
              }
              case 18: {
                if (encManifold3Backward_ == null) {
                  encManifold3Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward();
                }
                input.ReadMessage(encManifold3Backward_);
                break;
              }
              case 26: {
                if (encMotorBomb1_ == null) {
                  encMotorBomb1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1();
                }
                input.ReadMessage(encMotorBomb1_);
                break;
              }
              case 34: {
                if (encMotorBomb2_ == null) {
                  encMotorBomb2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2();
                }
                input.ReadMessage(encMotorBomb2_);
                break;
              }
              case 42: {
                if (encManifold2Auxiliar_ == null) {
                  encManifold2Auxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar();
                }
                input.ReadMessage(encManifold2Auxiliar_);
                break;
              }
              case 50: {
                if (encMotorBombAuxiliar_ == null) {
                  encMotorBombAuxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar();
                }
                input.ReadMessage(encMotorBombAuxiliar_);
                break;
              }
              case 58: {
                if (encManifold2Main_ == null) {
                  encManifold2Main_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main();
                }
                input.ReadMessage(encManifold2Main_);
                break;
              }
              case 66: {
                if (encMotorBomb3_ == null) {
                  encMotorBomb3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3();
                }
                input.ReadMessage(encMotorBomb3_);
                break;
              }
              case 74: {
                if (encMotorBomb4_ == null) {
                  encMotorBomb4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4();
                }
                input.ReadMessage(encMotorBomb4_);
                break;
              }
              case 82: {
                if (encManifold3Forward_ == null) {
                  encManifold3Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward();
                }
                input.ReadMessage(encManifold3Forward_);
                break;
              }
              case 90: {
                if (encManifold1Forward_ == null) {
                  encManifold1Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward();
                }
                input.ReadMessage(encManifold1Forward_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PumpsEngine message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Manifold_1_Backward : pb::IMessage<Manifold_1_Backward> {
            private static readonly pb::MessageParser<Manifold_1_Backward> _parser = new pb::MessageParser<Manifold_1_Backward>(() => new Manifold_1_Backward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_1_Backward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward(Manifold_1_Backward other) : this() {
              solenoidCylinderMoveBackward_ = other.solenoidCylinderMoveBackward_.Clone();
              solenoidCylinderActiveBackward_ = other.solenoidCylinderActiveBackward_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward Clone() {
              return new Manifold_1_Backward(this);
            }

            /// <summary>Field number for the "solenoid_cylinder_move_backward" field.</summary>
            public const int SolenoidCylinderMoveBackwardFieldNumber = 1;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidCylinderMoveBackward_codec
                = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidCylinderMoveBackward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidCylinderMoveBackward {
              get { return solenoidCylinderMoveBackward_; }
            }

            /// <summary>Field number for the "solenoid_cylinder_active_backward" field.</summary>
            public const int SolenoidCylinderActiveBackwardFieldNumber = 2;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidCylinderActiveBackward_codec
                = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidCylinderActiveBackward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidCylinderActiveBackward {
              get { return solenoidCylinderActiveBackward_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_1_Backward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_1_Backward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!solenoidCylinderMoveBackward_.Equals(other.solenoidCylinderMoveBackward_)) return false;
              if(!solenoidCylinderActiveBackward_.Equals(other.solenoidCylinderActiveBackward_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= solenoidCylinderMoveBackward_.GetHashCode();
              hash ^= solenoidCylinderActiveBackward_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              solenoidCylinderMoveBackward_.WriteTo(output, _repeated_solenoidCylinderMoveBackward_codec);
              solenoidCylinderActiveBackward_.WriteTo(output, _repeated_solenoidCylinderActiveBackward_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += solenoidCylinderMoveBackward_.CalculateSize(_repeated_solenoidCylinderMoveBackward_codec);
              size += solenoidCylinderActiveBackward_.CalculateSize(_repeated_solenoidCylinderActiveBackward_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_1_Backward other) {
              if (other == null) {
                return;
              }
              solenoidCylinderMoveBackward_.Add(other.solenoidCylinderMoveBackward_);
              solenoidCylinderActiveBackward_.Add(other.solenoidCylinderActiveBackward_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    solenoidCylinderMoveBackward_.AddEntriesFrom(input, _repeated_solenoidCylinderMoveBackward_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    solenoidCylinderActiveBackward_.AddEntriesFrom(input, _repeated_solenoidCylinderActiveBackward_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_3_Backward : pb::IMessage<Manifold_3_Backward> {
            private static readonly pb::MessageParser<Manifold_3_Backward> _parser = new pb::MessageParser<Manifold_3_Backward>(() => new Manifold_3_Backward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_3_Backward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward(Manifold_3_Backward other) : this() {
              solenoidActiveFootBackward_ = other.solenoidActiveFootBackward_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward Clone() {
              return new Manifold_3_Backward(this);
            }

            /// <summary>Field number for the "solenoid_active_foot_backward" field.</summary>
            public const int SolenoidActiveFootBackwardFieldNumber = 1;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidActiveFootBackward_codec
                = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidActiveFootBackward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidActiveFootBackward {
              get { return solenoidActiveFootBackward_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_3_Backward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_3_Backward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!solenoidActiveFootBackward_.Equals(other.solenoidActiveFootBackward_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= solenoidActiveFootBackward_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              solenoidActiveFootBackward_.WriteTo(output, _repeated_solenoidActiveFootBackward_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += solenoidActiveFootBackward_.CalculateSize(_repeated_solenoidActiveFootBackward_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_3_Backward other) {
              if (other == null) {
                return;
              }
              solenoidActiveFootBackward_.Add(other.solenoidActiveFootBackward_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    solenoidActiveFootBackward_.AddEntriesFrom(input, _repeated_solenoidActiveFootBackward_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_1 : pb::IMessage<MotorBomb_1> {
            private static readonly pb::MessageParser<MotorBomb_1> _parser = new pb::MessageParser<MotorBomb_1>(() => new MotorBomb_1());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_1> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1(MotorBomb_1 other) : this() {
              oilTemperature_ = other.oilTemperature_.Clone();
              motorRpm_ = other.motorRpm_.Clone();
              motorPower_ = other.motorPower_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1 Clone() {
              return new MotorBomb_1(this);
            }

            /// <summary>Field number for the "oil_temperature" field.</summary>
            public const int OilTemperatureFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_oilTemperature_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> oilTemperature_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> OilTemperature {
              get { return oilTemperature_; }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private static readonly pb::FieldCodec<uint> _repeated_motorRpm_codec
                = pb::FieldCodec.ForUInt32(18);
            private readonly pbc::RepeatedField<uint> motorRpm_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> MotorRpm {
              get { return motorRpm_; }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private static readonly pb::FieldCodec<float> _repeated_motorPower_codec
                = pb::FieldCodec.ForFloat(26);
            private readonly pbc::RepeatedField<float> motorPower_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorPower {
              get { return motorPower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_1);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_1 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!oilTemperature_.Equals(other.oilTemperature_)) return false;
              if(!motorRpm_.Equals(other.motorRpm_)) return false;
              if(!motorPower_.Equals(other.motorPower_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= oilTemperature_.GetHashCode();
              hash ^= motorRpm_.GetHashCode();
              hash ^= motorPower_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              oilTemperature_.WriteTo(output, _repeated_oilTemperature_codec);
              motorRpm_.WriteTo(output, _repeated_motorRpm_codec);
              motorPower_.WriteTo(output, _repeated_motorPower_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += oilTemperature_.CalculateSize(_repeated_oilTemperature_codec);
              size += motorRpm_.CalculateSize(_repeated_motorRpm_codec);
              size += motorPower_.CalculateSize(_repeated_motorPower_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_1 other) {
              if (other == null) {
                return;
              }
              oilTemperature_.Add(other.oilTemperature_);
              motorRpm_.Add(other.motorRpm_);
              motorPower_.Add(other.motorPower_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    oilTemperature_.AddEntriesFrom(input, _repeated_oilTemperature_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    motorRpm_.AddEntriesFrom(input, _repeated_motorRpm_codec);
                    break;
                  }
                  case 26:
                  case 29: {
                    motorPower_.AddEntriesFrom(input, _repeated_motorPower_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_2 : pb::IMessage<MotorBomb_2> {
            private static readonly pb::MessageParser<MotorBomb_2> _parser = new pb::MessageParser<MotorBomb_2>(() => new MotorBomb_2());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_2> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2(MotorBomb_2 other) : this() {
              motorRpm_ = other.motorRpm_.Clone();
              motorPower_ = other.motorPower_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2 Clone() {
              return new MotorBomb_2(this);
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 1;
            private static readonly pb::FieldCodec<uint> _repeated_motorRpm_codec
                = pb::FieldCodec.ForUInt32(10);
            private readonly pbc::RepeatedField<uint> motorRpm_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> MotorRpm {
              get { return motorRpm_; }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 2;
            private static readonly pb::FieldCodec<float> _repeated_motorPower_codec
                = pb::FieldCodec.ForFloat(18);
            private readonly pbc::RepeatedField<float> motorPower_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorPower {
              get { return motorPower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_2);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_2 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!motorRpm_.Equals(other.motorRpm_)) return false;
              if(!motorPower_.Equals(other.motorPower_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= motorRpm_.GetHashCode();
              hash ^= motorPower_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              motorRpm_.WriteTo(output, _repeated_motorRpm_codec);
              motorPower_.WriteTo(output, _repeated_motorPower_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += motorRpm_.CalculateSize(_repeated_motorRpm_codec);
              size += motorPower_.CalculateSize(_repeated_motorPower_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_2 other) {
              if (other == null) {
                return;
              }
              motorRpm_.Add(other.motorRpm_);
              motorPower_.Add(other.motorPower_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    motorRpm_.AddEntriesFrom(input, _repeated_motorRpm_codec);
                    break;
                  }
                  case 18:
                  case 21: {
                    motorPower_.AddEntriesFrom(input, _repeated_motorPower_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_2_Auxiliar : pb::IMessage<Manifold_2_Auxiliar> {
            private static readonly pb::MessageParser<Manifold_2_Auxiliar> _parser = new pb::MessageParser<Manifold_2_Auxiliar>(() => new Manifold_2_Auxiliar());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_2_Auxiliar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar(Manifold_2_Auxiliar other) : this() {
              hydraulicFootsPressure_ = other.hydraulicFootsPressure_.Clone();
              solenoidPressureFoots_ = other.solenoidPressureFoots_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar Clone() {
              return new Manifold_2_Auxiliar(this);
            }

            /// <summary>Field number for the "hydraulic_foots_pressure" field.</summary>
            public const int HydraulicFootsPressureFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_hydraulicFootsPressure_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> hydraulicFootsPressure_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> HydraulicFootsPressure {
              get { return hydraulicFootsPressure_; }
            }

            /// <summary>Field number for the "solenoid_pressure_foots" field.</summary>
            public const int SolenoidPressureFootsFieldNumber = 2;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidPressureFoots_codec
                = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidPressureFoots_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidPressureFoots {
              get { return solenoidPressureFoots_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_2_Auxiliar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_2_Auxiliar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!hydraulicFootsPressure_.Equals(other.hydraulicFootsPressure_)) return false;
              if(!solenoidPressureFoots_.Equals(other.solenoidPressureFoots_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= hydraulicFootsPressure_.GetHashCode();
              hash ^= solenoidPressureFoots_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              hydraulicFootsPressure_.WriteTo(output, _repeated_hydraulicFootsPressure_codec);
              solenoidPressureFoots_.WriteTo(output, _repeated_solenoidPressureFoots_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += hydraulicFootsPressure_.CalculateSize(_repeated_hydraulicFootsPressure_codec);
              size += solenoidPressureFoots_.CalculateSize(_repeated_solenoidPressureFoots_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_2_Auxiliar other) {
              if (other == null) {
                return;
              }
              hydraulicFootsPressure_.Add(other.hydraulicFootsPressure_);
              solenoidPressureFoots_.Add(other.solenoidPressureFoots_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    hydraulicFootsPressure_.AddEntriesFrom(input, _repeated_hydraulicFootsPressure_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    solenoidPressureFoots_.AddEntriesFrom(input, _repeated_solenoidPressureFoots_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBombAuxiliar : pb::IMessage<MotorBombAuxiliar> {
            private static readonly pb::MessageParser<MotorBombAuxiliar> _parser = new pb::MessageParser<MotorBombAuxiliar>(() => new MotorBombAuxiliar());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBombAuxiliar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar(MotorBombAuxiliar other) : this() {
              temperatureSensor_ = other.temperatureSensor_.Clone();
              motorRpm_ = other.motorRpm_.Clone();
              motorPower_ = other.motorPower_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar Clone() {
              return new MotorBombAuxiliar(this);
            }

            /// <summary>Field number for the "temperature_sensor" field.</summary>
            public const int TemperatureSensorFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_temperatureSensor_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> temperatureSensor_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> TemperatureSensor {
              get { return temperatureSensor_; }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private static readonly pb::FieldCodec<uint> _repeated_motorRpm_codec
                = pb::FieldCodec.ForUInt32(18);
            private readonly pbc::RepeatedField<uint> motorRpm_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> MotorRpm {
              get { return motorRpm_; }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private static readonly pb::FieldCodec<float> _repeated_motorPower_codec
                = pb::FieldCodec.ForFloat(26);
            private readonly pbc::RepeatedField<float> motorPower_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorPower {
              get { return motorPower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBombAuxiliar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBombAuxiliar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!temperatureSensor_.Equals(other.temperatureSensor_)) return false;
              if(!motorRpm_.Equals(other.motorRpm_)) return false;
              if(!motorPower_.Equals(other.motorPower_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= temperatureSensor_.GetHashCode();
              hash ^= motorRpm_.GetHashCode();
              hash ^= motorPower_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              temperatureSensor_.WriteTo(output, _repeated_temperatureSensor_codec);
              motorRpm_.WriteTo(output, _repeated_motorRpm_codec);
              motorPower_.WriteTo(output, _repeated_motorPower_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += temperatureSensor_.CalculateSize(_repeated_temperatureSensor_codec);
              size += motorRpm_.CalculateSize(_repeated_motorRpm_codec);
              size += motorPower_.CalculateSize(_repeated_motorPower_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBombAuxiliar other) {
              if (other == null) {
                return;
              }
              temperatureSensor_.Add(other.temperatureSensor_);
              motorRpm_.Add(other.motorRpm_);
              motorPower_.Add(other.motorPower_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    temperatureSensor_.AddEntriesFrom(input, _repeated_temperatureSensor_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    motorRpm_.AddEntriesFrom(input, _repeated_motorRpm_codec);
                    break;
                  }
                  case 26:
                  case 29: {
                    motorPower_.AddEntriesFrom(input, _repeated_motorPower_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_2_Main : pb::IMessage<Manifold_2_Main> {
            private static readonly pb::MessageParser<Manifold_2_Main> _parser = new pb::MessageParser<Manifold_2_Main>(() => new Manifold_2_Main());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_2_Main> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main(Manifold_2_Main other) : this() {
              hydraulicCylinderPressure_ = other.hydraulicCylinderPressure_.Clone();
              solenoidMovePressure_ = other.solenoidMovePressure_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main Clone() {
              return new Manifold_2_Main(this);
            }

            /// <summary>Field number for the "hydraulic_cylinder_pressure" field.</summary>
            public const int HydraulicCylinderPressureFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_hydraulicCylinderPressure_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> hydraulicCylinderPressure_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> HydraulicCylinderPressure {
              get { return hydraulicCylinderPressure_; }
            }

            /// <summary>Field number for the "solenoid_move_pressure" field.</summary>
            public const int SolenoidMovePressureFieldNumber = 2;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidMovePressure_codec
                = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidMovePressure_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidMovePressure {
              get { return solenoidMovePressure_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_2_Main);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_2_Main other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!hydraulicCylinderPressure_.Equals(other.hydraulicCylinderPressure_)) return false;
              if(!solenoidMovePressure_.Equals(other.solenoidMovePressure_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= hydraulicCylinderPressure_.GetHashCode();
              hash ^= solenoidMovePressure_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              hydraulicCylinderPressure_.WriteTo(output, _repeated_hydraulicCylinderPressure_codec);
              solenoidMovePressure_.WriteTo(output, _repeated_solenoidMovePressure_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += hydraulicCylinderPressure_.CalculateSize(_repeated_hydraulicCylinderPressure_codec);
              size += solenoidMovePressure_.CalculateSize(_repeated_solenoidMovePressure_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_2_Main other) {
              if (other == null) {
                return;
              }
              hydraulicCylinderPressure_.Add(other.hydraulicCylinderPressure_);
              solenoidMovePressure_.Add(other.solenoidMovePressure_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    hydraulicCylinderPressure_.AddEntriesFrom(input, _repeated_hydraulicCylinderPressure_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    solenoidMovePressure_.AddEntriesFrom(input, _repeated_solenoidMovePressure_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_3 : pb::IMessage<MotorBomb_3> {
            private static readonly pb::MessageParser<MotorBomb_3> _parser = new pb::MessageParser<MotorBomb_3>(() => new MotorBomb_3());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_3> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3(MotorBomb_3 other) : this() {
              motorRpm_ = other.motorRpm_.Clone();
              motorPower_ = other.motorPower_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3 Clone() {
              return new MotorBomb_3(this);
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_motorRpm_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> motorRpm_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorRpm {
              get { return motorRpm_; }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 2;
            private static readonly pb::FieldCodec<float> _repeated_motorPower_codec
                = pb::FieldCodec.ForFloat(18);
            private readonly pbc::RepeatedField<float> motorPower_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorPower {
              get { return motorPower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_3);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_3 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!motorRpm_.Equals(other.motorRpm_)) return false;
              if(!motorPower_.Equals(other.motorPower_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= motorRpm_.GetHashCode();
              hash ^= motorPower_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              motorRpm_.WriteTo(output, _repeated_motorRpm_codec);
              motorPower_.WriteTo(output, _repeated_motorPower_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += motorRpm_.CalculateSize(_repeated_motorRpm_codec);
              size += motorPower_.CalculateSize(_repeated_motorPower_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_3 other) {
              if (other == null) {
                return;
              }
              motorRpm_.Add(other.motorRpm_);
              motorPower_.Add(other.motorPower_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    motorRpm_.AddEntriesFrom(input, _repeated_motorRpm_codec);
                    break;
                  }
                  case 18:
                  case 21: {
                    motorPower_.AddEntriesFrom(input, _repeated_motorPower_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_4 : pb::IMessage<MotorBomb_4> {
            private static readonly pb::MessageParser<MotorBomb_4> _parser = new pb::MessageParser<MotorBomb_4>(() => new MotorBomb_4());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_4> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[8]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4(MotorBomb_4 other) : this() {
              oilTemperature_ = other.oilTemperature_.Clone();
              motorRpm_ = other.motorRpm_.Clone();
              motorPower_ = other.motorPower_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4 Clone() {
              return new MotorBomb_4(this);
            }

            /// <summary>Field number for the "oil_temperature" field.</summary>
            public const int OilTemperatureFieldNumber = 1;
            private static readonly pb::FieldCodec<float> _repeated_oilTemperature_codec
                = pb::FieldCodec.ForFloat(10);
            private readonly pbc::RepeatedField<float> oilTemperature_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> OilTemperature {
              get { return oilTemperature_; }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private static readonly pb::FieldCodec<uint> _repeated_motorRpm_codec
                = pb::FieldCodec.ForUInt32(18);
            private readonly pbc::RepeatedField<uint> motorRpm_ = new pbc::RepeatedField<uint>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<uint> MotorRpm {
              get { return motorRpm_; }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private static readonly pb::FieldCodec<float> _repeated_motorPower_codec
                = pb::FieldCodec.ForFloat(26);
            private readonly pbc::RepeatedField<float> motorPower_ = new pbc::RepeatedField<float>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<float> MotorPower {
              get { return motorPower_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_4);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_4 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!oilTemperature_.Equals(other.oilTemperature_)) return false;
              if(!motorRpm_.Equals(other.motorRpm_)) return false;
              if(!motorPower_.Equals(other.motorPower_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= oilTemperature_.GetHashCode();
              hash ^= motorRpm_.GetHashCode();
              hash ^= motorPower_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              oilTemperature_.WriteTo(output, _repeated_oilTemperature_codec);
              motorRpm_.WriteTo(output, _repeated_motorRpm_codec);
              motorPower_.WriteTo(output, _repeated_motorPower_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += oilTemperature_.CalculateSize(_repeated_oilTemperature_codec);
              size += motorRpm_.CalculateSize(_repeated_motorRpm_codec);
              size += motorPower_.CalculateSize(_repeated_motorPower_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_4 other) {
              if (other == null) {
                return;
              }
              oilTemperature_.Add(other.oilTemperature_);
              motorRpm_.Add(other.motorRpm_);
              motorPower_.Add(other.motorPower_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 13: {
                    oilTemperature_.AddEntriesFrom(input, _repeated_oilTemperature_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    motorRpm_.AddEntriesFrom(input, _repeated_motorRpm_codec);
                    break;
                  }
                  case 26:
                  case 29: {
                    motorPower_.AddEntriesFrom(input, _repeated_motorPower_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_3_Forward : pb::IMessage<Manifold_3_Forward> {
            private static readonly pb::MessageParser<Manifold_3_Forward> _parser = new pb::MessageParser<Manifold_3_Forward>(() => new Manifold_3_Forward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_3_Forward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[9]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward(Manifold_3_Forward other) : this() {
              solenoidActiveForward_ = other.solenoidActiveForward_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward Clone() {
              return new Manifold_3_Forward(this);
            }

            /// <summary>Field number for the "solenoid_active_forward" field.</summary>
            public const int SolenoidActiveForwardFieldNumber = 1;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidActiveForward_codec
                = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidActiveForward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidActiveForward {
              get { return solenoidActiveForward_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_3_Forward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_3_Forward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!solenoidActiveForward_.Equals(other.solenoidActiveForward_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= solenoidActiveForward_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              solenoidActiveForward_.WriteTo(output, _repeated_solenoidActiveForward_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += solenoidActiveForward_.CalculateSize(_repeated_solenoidActiveForward_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_3_Forward other) {
              if (other == null) {
                return;
              }
              solenoidActiveForward_.Add(other.solenoidActiveForward_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    solenoidActiveForward_.AddEntriesFrom(input, _repeated_solenoidActiveForward_codec);
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_1_Forward : pb::IMessage<Manifold_1_Forward> {
            private static readonly pb::MessageParser<Manifold_1_Forward> _parser = new pb::MessageParser<Manifold_1_Forward>(() => new Manifold_1_Forward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_1_Forward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[10]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward(Manifold_1_Forward other) : this() {
              solenoidCylinderMoveForward_ = other.solenoidCylinderMoveForward_.Clone();
              solenoidCylinderActiveForward_ = other.solenoidCylinderActiveForward_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward Clone() {
              return new Manifold_1_Forward(this);
            }

            /// <summary>Field number for the "solenoid_cylinder_move_forward" field.</summary>
            public const int SolenoidCylinderMoveForwardFieldNumber = 1;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidCylinderMoveForward_codec
                = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidCylinderMoveForward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidCylinderMoveForward {
              get { return solenoidCylinderMoveForward_; }
            }

            /// <summary>Field number for the "solenoid_cylinder_active_forward" field.</summary>
            public const int SolenoidCylinderActiveForwardFieldNumber = 2;
            private static readonly pb::FieldCodec<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> _repeated_solenoidCylinderActiveForward_codec
                = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) x);
            private readonly pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> solenoidCylinderActiveForward_ = new pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState>();
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState> SolenoidCylinderActiveForward {
              get { return solenoidCylinderActiveForward_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_1_Forward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_1_Forward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!solenoidCylinderMoveForward_.Equals(other.solenoidCylinderMoveForward_)) return false;
              if(!solenoidCylinderActiveForward_.Equals(other.solenoidCylinderActiveForward_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= solenoidCylinderMoveForward_.GetHashCode();
              hash ^= solenoidCylinderActiveForward_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              solenoidCylinderMoveForward_.WriteTo(output, _repeated_solenoidCylinderMoveForward_codec);
              solenoidCylinderActiveForward_.WriteTo(output, _repeated_solenoidCylinderActiveForward_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += solenoidCylinderMoveForward_.CalculateSize(_repeated_solenoidCylinderMoveForward_codec);
              size += solenoidCylinderActiveForward_.CalculateSize(_repeated_solenoidCylinderActiveForward_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_1_Forward other) {
              if (other == null) {
                return;
              }
              solenoidCylinderMoveForward_.Add(other.solenoidCylinderMoveForward_);
              solenoidCylinderActiveForward_.Add(other.solenoidCylinderActiveForward_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10:
                  case 8: {
                    solenoidCylinderMoveForward_.AddEntriesFrom(input, _repeated_solenoidCylinderMoveForward_codec);
                    break;
                  }
                  case 18:
                  case 16: {
                    solenoidCylinderActiveForward_.AddEntriesFrom(input, _repeated_solenoidCylinderActiveForward_codec);
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class SgnReactor : pb::IMessage<SgnReactor> {
        private static readonly pb::MessageParser<SgnReactor> _parser = new pb::MessageParser<SgnReactor>(() => new SgnReactor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SgnReactor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor(SgnReactor other) : this() {
          sgnTemperature_ = other.sgnTemperature_.Clone();
          obstructionDetected_ = other.obstructionDetected_.Clone();
          reactorPressure_ = other.reactorPressure_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor Clone() {
          return new SgnReactor(this);
        }

        /// <summary>Field number for the "sgn_temperature" field.</summary>
        public const int SgnTemperatureFieldNumber = 1;
        private static readonly pb::FieldCodec<float> _repeated_sgnTemperature_codec
            = pb::FieldCodec.ForFloat(10);
        private readonly pbc::RepeatedField<float> sgnTemperature_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> SgnTemperature {
          get { return sgnTemperature_; }
        }

        /// <summary>Field number for the "obstruction_detected" field.</summary>
        public const int ObstructionDetectedFieldNumber = 2;
        private static readonly pb::FieldCodec<bool> _repeated_obstructionDetected_codec
            = pb::FieldCodec.ForBool(18);
        private readonly pbc::RepeatedField<bool> obstructionDetected_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> ObstructionDetected {
          get { return obstructionDetected_; }
        }

        /// <summary>Field number for the "reactor_pressure" field.</summary>
        public const int ReactorPressureFieldNumber = 3;
        private static readonly pb::FieldCodec<float> _repeated_reactorPressure_codec
            = pb::FieldCodec.ForFloat(26);
        private readonly pbc::RepeatedField<float> reactorPressure_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> ReactorPressure {
          get { return reactorPressure_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SgnReactor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SgnReactor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!sgnTemperature_.Equals(other.sgnTemperature_)) return false;
          if(!obstructionDetected_.Equals(other.obstructionDetected_)) return false;
          if(!reactorPressure_.Equals(other.reactorPressure_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= sgnTemperature_.GetHashCode();
          hash ^= obstructionDetected_.GetHashCode();
          hash ^= reactorPressure_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          sgnTemperature_.WriteTo(output, _repeated_sgnTemperature_codec);
          obstructionDetected_.WriteTo(output, _repeated_obstructionDetected_codec);
          reactorPressure_.WriteTo(output, _repeated_reactorPressure_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += sgnTemperature_.CalculateSize(_repeated_sgnTemperature_codec);
          size += obstructionDetected_.CalculateSize(_repeated_obstructionDetected_codec);
          size += reactorPressure_.CalculateSize(_repeated_reactorPressure_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SgnReactor other) {
          if (other == null) {
            return;
          }
          sgnTemperature_.Add(other.sgnTemperature_);
          obstructionDetected_.Add(other.obstructionDetected_);
          reactorPressure_.Add(other.reactorPressure_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 13: {
                sgnTemperature_.AddEntriesFrom(input, _repeated_sgnTemperature_codec);
                break;
              }
              case 18:
              case 16: {
                obstructionDetected_.AddEntriesFrom(input, _repeated_obstructionDetected_codec);
                break;
              }
              case 26:
              case 29: {
                reactorPressure_.AddEntriesFrom(input, _repeated_reactorPressure_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
