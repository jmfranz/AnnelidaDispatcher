// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: annelida_control.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AnnelidaDispatcher.Model.DataTransmission {

  /// <summary>Holder for reflection information generated from annelida_control.proto</summary>
  public static partial class AnnelidaControlReflection {

    #region Descriptor
    /// <summary>File descriptor for annelida_control.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnnelidaControlReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZhbm5lbGlkYV9jb250cm9sLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvIugDCg9Bbm5lbGlkYUNvbnRyb2wSLQoJdGltZXN0YW1w",
            "GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIWCg5sb2NvbWl0",
            "dmVQb3dlchgCIAEoCBITCgt0YXJnZXRTcGVlZBgDIAEoAhIbChNtYWluQ3ls",
            "aW5kZXJGb3J3YXJkGAQgASgIEhwKFG1haW5DeWxpbmRlckJhY2t3YXJkGAUg",
            "ASgIEhoKEmF1eEN5bGluZGVyRm9yd2FyZBgGIAEoCBIbChNhdXhDeWxpbmRl",
            "ckJhY2t3YXJkGAcgASgIEhcKD2h5ZHJhdWxpY1JldHVybhgIIAEoCBITCgtj",
            "cmFuZVJldHVybhgJIAEoCBIfChdkZXNvYnN0cnVjdGlvblRvb2xQb3dlchgK",
            "IAEoCBIPCgdzZ25QdW1wGAsgASgIEg8KB3NnbkZsb3cYDCABKAgSFAoMbWFz",
            "dGVyU3dpdGNoGA0gASgIEhUKDWVtZXJnZW5jeVN0b3AYDiABKAgSNAoKc2Vu",
            "c29yc09mZhgPIAMoCzIgLkFubmVsaWRhQ29udHJvbC5TZW5zb3JzT2ZmRW50",
            "cnkaMQoPU2Vuc29yc09mZkVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgC",
            "IAEoCDoCOAFCLKoCKUFubmVsaWRhRGlzcGF0Y2hlci5Nb2RlbC5EYXRhVHJh",
            "bnNtaXNzaW9uYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaControl), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaControl.Parser, new[]{ "Timestamp", "LocomitvePower", "TargetSpeed", "MainCylinderForward", "MainCylinderBackward", "AuxCylinderForward", "AuxCylinderBackward", "HydraulicReturn", "CraneReturn", "DesobstructionToolPower", "SgnPump", "SgnFlow", "MasterSwitch", "EmergencyStop", "SensorsOff" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AnnelidaControl : pb::IMessage<AnnelidaControl> {
    private static readonly pb::MessageParser<AnnelidaControl> _parser = new pb::MessageParser<AnnelidaControl>(() => new AnnelidaControl());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnelidaControl> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaControlReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaControl() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaControl(AnnelidaControl other) : this() {
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      locomitvePower_ = other.locomitvePower_;
      targetSpeed_ = other.targetSpeed_;
      mainCylinderForward_ = other.mainCylinderForward_;
      mainCylinderBackward_ = other.mainCylinderBackward_;
      auxCylinderForward_ = other.auxCylinderForward_;
      auxCylinderBackward_ = other.auxCylinderBackward_;
      hydraulicReturn_ = other.hydraulicReturn_;
      craneReturn_ = other.craneReturn_;
      desobstructionToolPower_ = other.desobstructionToolPower_;
      sgnPump_ = other.sgnPump_;
      sgnFlow_ = other.sgnFlow_;
      masterSwitch_ = other.masterSwitch_;
      emergencyStop_ = other.emergencyStop_;
      sensorsOff_ = other.sensorsOff_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaControl Clone() {
      return new AnnelidaControl(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "locomitvePower" field.</summary>
    public const int LocomitvePowerFieldNumber = 2;
    private bool locomitvePower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LocomitvePower {
      get { return locomitvePower_; }
      set {
        locomitvePower_ = value;
      }
    }

    /// <summary>Field number for the "targetSpeed" field.</summary>
    public const int TargetSpeedFieldNumber = 3;
    private float targetSpeed_;
    /// <summary>
    ///if target speed == 0 then fall back to manual control
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TargetSpeed {
      get { return targetSpeed_; }
      set {
        targetSpeed_ = value;
      }
    }

    /// <summary>Field number for the "mainCylinderForward" field.</summary>
    public const int MainCylinderForwardFieldNumber = 4;
    private bool mainCylinderForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MainCylinderForward {
      get { return mainCylinderForward_; }
      set {
        mainCylinderForward_ = value;
      }
    }

    /// <summary>Field number for the "mainCylinderBackward" field.</summary>
    public const int MainCylinderBackwardFieldNumber = 5;
    private bool mainCylinderBackward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MainCylinderBackward {
      get { return mainCylinderBackward_; }
      set {
        mainCylinderBackward_ = value;
      }
    }

    /// <summary>Field number for the "auxCylinderForward" field.</summary>
    public const int AuxCylinderForwardFieldNumber = 6;
    private bool auxCylinderForward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AuxCylinderForward {
      get { return auxCylinderForward_; }
      set {
        auxCylinderForward_ = value;
      }
    }

    /// <summary>Field number for the "auxCylinderBackward" field.</summary>
    public const int AuxCylinderBackwardFieldNumber = 7;
    private bool auxCylinderBackward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AuxCylinderBackward {
      get { return auxCylinderBackward_; }
      set {
        auxCylinderBackward_ = value;
      }
    }

    /// <summary>Field number for the "hydraulicReturn" field.</summary>
    public const int HydraulicReturnFieldNumber = 8;
    private bool hydraulicReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HydraulicReturn {
      get { return hydraulicReturn_; }
      set {
        hydraulicReturn_ = value;
      }
    }

    /// <summary>Field number for the "craneReturn" field.</summary>
    public const int CraneReturnFieldNumber = 9;
    private bool craneReturn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CraneReturn {
      get { return craneReturn_; }
      set {
        craneReturn_ = value;
      }
    }

    /// <summary>Field number for the "desobstructionToolPower" field.</summary>
    public const int DesobstructionToolPowerFieldNumber = 10;
    private bool desobstructionToolPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DesobstructionToolPower {
      get { return desobstructionToolPower_; }
      set {
        desobstructionToolPower_ = value;
      }
    }

    /// <summary>Field number for the "sgnPump" field.</summary>
    public const int SgnPumpFieldNumber = 11;
    private bool sgnPump_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SgnPump {
      get { return sgnPump_; }
      set {
        sgnPump_ = value;
      }
    }

    /// <summary>Field number for the "sgnFlow" field.</summary>
    public const int SgnFlowFieldNumber = 12;
    private bool sgnFlow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SgnFlow {
      get { return sgnFlow_; }
      set {
        sgnFlow_ = value;
      }
    }

    /// <summary>Field number for the "masterSwitch" field.</summary>
    public const int MasterSwitchFieldNumber = 13;
    private bool masterSwitch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool MasterSwitch {
      get { return masterSwitch_; }
      set {
        masterSwitch_ = value;
      }
    }

    /// <summary>Field number for the "emergencyStop" field.</summary>
    public const int EmergencyStopFieldNumber = 14;
    private bool emergencyStop_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EmergencyStop {
      get { return emergencyStop_; }
      set {
        emergencyStop_ = value;
      }
    }

    /// <summary>Field number for the "sensorsOff" field.</summary>
    public const int SensorsOffFieldNumber = 15;
    private static readonly pbc::MapField<string, bool>.Codec _map_sensorsOff_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 122);
    private readonly pbc::MapField<string, bool> sensorsOff_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> SensorsOff {
      get { return sensorsOff_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnelidaControl);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnelidaControl other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (LocomitvePower != other.LocomitvePower) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TargetSpeed, other.TargetSpeed)) return false;
      if (MainCylinderForward != other.MainCylinderForward) return false;
      if (MainCylinderBackward != other.MainCylinderBackward) return false;
      if (AuxCylinderForward != other.AuxCylinderForward) return false;
      if (AuxCylinderBackward != other.AuxCylinderBackward) return false;
      if (HydraulicReturn != other.HydraulicReturn) return false;
      if (CraneReturn != other.CraneReturn) return false;
      if (DesobstructionToolPower != other.DesobstructionToolPower) return false;
      if (SgnPump != other.SgnPump) return false;
      if (SgnFlow != other.SgnFlow) return false;
      if (MasterSwitch != other.MasterSwitch) return false;
      if (EmergencyStop != other.EmergencyStop) return false;
      if (!SensorsOff.Equals(other.SensorsOff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (LocomitvePower != false) hash ^= LocomitvePower.GetHashCode();
      if (TargetSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TargetSpeed);
      if (MainCylinderForward != false) hash ^= MainCylinderForward.GetHashCode();
      if (MainCylinderBackward != false) hash ^= MainCylinderBackward.GetHashCode();
      if (AuxCylinderForward != false) hash ^= AuxCylinderForward.GetHashCode();
      if (AuxCylinderBackward != false) hash ^= AuxCylinderBackward.GetHashCode();
      if (HydraulicReturn != false) hash ^= HydraulicReturn.GetHashCode();
      if (CraneReturn != false) hash ^= CraneReturn.GetHashCode();
      if (DesobstructionToolPower != false) hash ^= DesobstructionToolPower.GetHashCode();
      if (SgnPump != false) hash ^= SgnPump.GetHashCode();
      if (SgnFlow != false) hash ^= SgnFlow.GetHashCode();
      if (MasterSwitch != false) hash ^= MasterSwitch.GetHashCode();
      if (EmergencyStop != false) hash ^= EmergencyStop.GetHashCode();
      hash ^= SensorsOff.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (LocomitvePower != false) {
        output.WriteRawTag(16);
        output.WriteBool(LocomitvePower);
      }
      if (TargetSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(TargetSpeed);
      }
      if (MainCylinderForward != false) {
        output.WriteRawTag(32);
        output.WriteBool(MainCylinderForward);
      }
      if (MainCylinderBackward != false) {
        output.WriteRawTag(40);
        output.WriteBool(MainCylinderBackward);
      }
      if (AuxCylinderForward != false) {
        output.WriteRawTag(48);
        output.WriteBool(AuxCylinderForward);
      }
      if (AuxCylinderBackward != false) {
        output.WriteRawTag(56);
        output.WriteBool(AuxCylinderBackward);
      }
      if (HydraulicReturn != false) {
        output.WriteRawTag(64);
        output.WriteBool(HydraulicReturn);
      }
      if (CraneReturn != false) {
        output.WriteRawTag(72);
        output.WriteBool(CraneReturn);
      }
      if (DesobstructionToolPower != false) {
        output.WriteRawTag(80);
        output.WriteBool(DesobstructionToolPower);
      }
      if (SgnPump != false) {
        output.WriteRawTag(88);
        output.WriteBool(SgnPump);
      }
      if (SgnFlow != false) {
        output.WriteRawTag(96);
        output.WriteBool(SgnFlow);
      }
      if (MasterSwitch != false) {
        output.WriteRawTag(104);
        output.WriteBool(MasterSwitch);
      }
      if (EmergencyStop != false) {
        output.WriteRawTag(112);
        output.WriteBool(EmergencyStop);
      }
      sensorsOff_.WriteTo(output, _map_sensorsOff_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (LocomitvePower != false) {
        size += 1 + 1;
      }
      if (TargetSpeed != 0F) {
        size += 1 + 4;
      }
      if (MainCylinderForward != false) {
        size += 1 + 1;
      }
      if (MainCylinderBackward != false) {
        size += 1 + 1;
      }
      if (AuxCylinderForward != false) {
        size += 1 + 1;
      }
      if (AuxCylinderBackward != false) {
        size += 1 + 1;
      }
      if (HydraulicReturn != false) {
        size += 1 + 1;
      }
      if (CraneReturn != false) {
        size += 1 + 1;
      }
      if (DesobstructionToolPower != false) {
        size += 1 + 1;
      }
      if (SgnPump != false) {
        size += 1 + 1;
      }
      if (SgnFlow != false) {
        size += 1 + 1;
      }
      if (MasterSwitch != false) {
        size += 1 + 1;
      }
      if (EmergencyStop != false) {
        size += 1 + 1;
      }
      size += sensorsOff_.CalculateSize(_map_sensorsOff_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnelidaControl other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.LocomitvePower != false) {
        LocomitvePower = other.LocomitvePower;
      }
      if (other.TargetSpeed != 0F) {
        TargetSpeed = other.TargetSpeed;
      }
      if (other.MainCylinderForward != false) {
        MainCylinderForward = other.MainCylinderForward;
      }
      if (other.MainCylinderBackward != false) {
        MainCylinderBackward = other.MainCylinderBackward;
      }
      if (other.AuxCylinderForward != false) {
        AuxCylinderForward = other.AuxCylinderForward;
      }
      if (other.AuxCylinderBackward != false) {
        AuxCylinderBackward = other.AuxCylinderBackward;
      }
      if (other.HydraulicReturn != false) {
        HydraulicReturn = other.HydraulicReturn;
      }
      if (other.CraneReturn != false) {
        CraneReturn = other.CraneReturn;
      }
      if (other.DesobstructionToolPower != false) {
        DesobstructionToolPower = other.DesobstructionToolPower;
      }
      if (other.SgnPump != false) {
        SgnPump = other.SgnPump;
      }
      if (other.SgnFlow != false) {
        SgnFlow = other.SgnFlow;
      }
      if (other.MasterSwitch != false) {
        MasterSwitch = other.MasterSwitch;
      }
      if (other.EmergencyStop != false) {
        EmergencyStop = other.EmergencyStop;
      }
      sensorsOff_.Add(other.sensorsOff_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 16: {
            LocomitvePower = input.ReadBool();
            break;
          }
          case 29: {
            TargetSpeed = input.ReadFloat();
            break;
          }
          case 32: {
            MainCylinderForward = input.ReadBool();
            break;
          }
          case 40: {
            MainCylinderBackward = input.ReadBool();
            break;
          }
          case 48: {
            AuxCylinderForward = input.ReadBool();
            break;
          }
          case 56: {
            AuxCylinderBackward = input.ReadBool();
            break;
          }
          case 64: {
            HydraulicReturn = input.ReadBool();
            break;
          }
          case 72: {
            CraneReturn = input.ReadBool();
            break;
          }
          case 80: {
            DesobstructionToolPower = input.ReadBool();
            break;
          }
          case 88: {
            SgnPump = input.ReadBool();
            break;
          }
          case 96: {
            SgnFlow = input.ReadBool();
            break;
          }
          case 104: {
            MasterSwitch = input.ReadBool();
            break;
          }
          case 112: {
            EmergencyStop = input.ReadBool();
            break;
          }
          case 122: {
            sensorsOff_.AddEntriesFrom(input, _map_sensorsOff_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
