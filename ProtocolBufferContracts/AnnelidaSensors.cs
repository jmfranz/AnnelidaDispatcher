// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: annelida_sensors.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AnnelidaDispatcher.Model.DataTransmission {

  /// <summary>Holder for reflection information generated from annelida_sensors.proto</summary>
  public static partial class AnnelidaSensorsReflection {

    #region Descriptor
    /// <summary>File descriptor for annelida_sensors.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AnnelidaSensorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZhbm5lbGlkYV9zZW5zb3JzLnByb3RvGh9nb29nbGUvcHJvdG9idWYvdGlt",
            "ZXN0YW1wLnByb3RvIuMgCg9Bbm5lbGlkYVNlbnNvcnMSLQoJdGltZXN0YW1w",
            "GAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBI6Cg1lbmNfcmVj",
            "ZXB0aW9uGAIgASgLMiMuQW5uZWxpZGFTZW5zb3JzLlVtYmlsaWNhbFJlY2Vw",
            "dGlvbhJDChNlbmNfbm90X3JlZ3VsYXRlZF8xGAMgASgLMiYuQW5uZWxpZGFT",
            "ZW5zb3JzLk5vdFJlZ3VsYXRlZENvbnZlcnRlchJDChNlbmNfbm90X3JlZ3Vs",
            "YXRlZF8yGAQgASgLMiYuQW5uZWxpZGFTZW5zb3JzLk5vdFJlZ3VsYXRlZENv",
            "bnZlcnRlchI8Cg9lbmNfcmVndWxhdGVkXzEYBSABKAsyIy5Bbm5lbGlkYVNl",
            "bnNvcnMuUmVndWxhdGVkQ29udmVydGVyEjwKD2VuY19yZWd1bGF0ZWRfMhgG",
            "IAEoCzIjLkFubmVsaWRhU2Vuc29ycy5SZWd1bGF0ZWRDb252ZXJ0ZXISPAoT",
            "ZW5jX2VtYmVkZGVkX3N5c3RlbRgHIAEoCzIfLkFubmVsaWRhU2Vuc29ycy5F",
            "bWJlZGRlZFN5c3RlbRJAChZlbmNfbW90b3JfY29udHJvbGxlcl8xGAggASgL",
            "MiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchJAChZlbmNfbW90",
            "b3JfY29udHJvbGxlcl8yGAkgASgLMiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9y",
            "Q29udHJvbGxlchJAChZlbmNfbW90b3JfY29udHJvbGxlcl8zGAogASgLMiAu",
            "QW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchJAChZlbmNfbW90b3Jf",
            "Y29udHJvbGxlcl80GAsgASgLMiAuQW5uZWxpZGFTZW5zb3JzLk1vdG9yQ29u",
            "dHJvbGxlchJAChZlbmNfbW90b3JfY29udHJvbGxlcl81GAwgASgLMiAuQW5u",
            "ZWxpZGFTZW5zb3JzLk1vdG9yQ29udHJvbGxlchI7ChZlbmNfZm9yd2FyZF9s",
            "b2NvbW90aXZlGA0gASgLMhsuQW5uZWxpZGFTZW5zb3JzLkxvY29tb3RpdmUS",
            "PAoXZW5jX2JhY2t3YXJkX2xvY29tb3RpdmUYDiABKAsyGy5Bbm5lbGlkYVNl",
            "bnNvcnMuTG9jb21vdGl2ZRIyCgxzeXN0ZW1fcHVtcHMYDyABKAsyHC5Bbm5l",
            "bGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUSMAoLZW5jX3JlYWN0b3IYECABKAsy",
            "Gy5Bbm5lbGlkYVNlbnNvcnMuU2duUmVhY3RvchomChJVbWJpbGljYWxSZWNl",
            "cHRpb24SEAoIdHJhY3Rpb24YASABKA0apQIKFU5vdFJlZ3VsYXRlZENvbnZl",
            "cnRlchIcChRpbnRlcm5hbF90ZW1wZXJhdHVyZRgBIAEoAhIZChFpbnRlcm5h",
            "bF9wcmVzc3VyZRgCIAEoAhIdChVlbGVjdHJpY2FsX2N1cnJlbnRfYzEYAyAB",
            "KAISHQoVZWxlY3RyaWNhbF9jdXJyZW50X2MyGAQgASgCEh0KFWVsZWN0cmlj",
            "YWxfY3VycmVudF9jMxgFIAEoAhIbChNlbGVjdHJpY2FsX3Bvd2VyX3AxGAYg",
            "ASgCEhsKE2VsZWN0cmljYWxfcG93ZXJfcDIYByABKAISGwoTZWxlY3RyaWNh",
            "bF9wb3dlcl9wMxgIIAEoAhIfChdlbGVjdHJpY2FsX3RlbnNpb25fNzAwdhgJ",
            "IAEoAhrZAgoSUmVndWxhdGVkQ29udmVydGVyEhwKFGludGVybmFsX3RlbXBl",
            "cmF0dXJlGAEgASgCEhkKEWludGVybmFsX3ByZXNzdXJlGAIgASgCEh0KFWVs",
            "ZWN0cmljYWxfY3VycmVudF9jMRgDIAEoAhIdChVlbGVjdHJpY2FsX2N1cnJl",
            "bnRfYzIYBCABKAISHQoVZWxlY3RyaWNhbF9jdXJyZW50X2MzGAUgASgCEh0K",
            "FWVsZWN0cmljYWxfY3VycmVudF9jNBgGIAEoAhIbChNlbGVjdHJpY2FsX3Bv",
            "d2VyX3AxGAcgASgCEhsKE2VsZWN0cmljYWxfcG93ZXJfcDIYCCABKAISGwoT",
            "ZWxlY3RyaWNhbF9wb3dlcl9wMxgJIAEoAhIbChNlbGVjdHJpY2FsX3Bvd2Vy",
            "X3A0GAogASgCEhoKEmVsZWN0cmljYWxfdGVuc2lvbhgLIAEoAhq3AgoORW1i",
            "ZWRkZWRTeXN0ZW0SHAoUaW50ZXJuYWxfdGVtcGVyYXR1cmUYASABKAISGQoR",
            "aW50ZXJuYWxfcHJlc3N1cmUYAiABKAISIAoYZXh0ZXJuYWxfbW9kdWxlX3By",
            "ZXNzdXJlGAMgASgCEhIKCnJvdGF0aW9uX3gYBCABKAISEgoKcm90YXRpb25f",
            "eRgFIAEoAhISCgpyb3RhdGlvbl96GAYgASgCEhYKDmRpc3BsYWNlbWVudF94",
            "GAcgASgCEhYKDmRpc3BsYWNlbWVudF95GAggASgCEhYKDmRpc3BsYWNlbWVu",
            "dF96GAkgASgCEhYKDmFjY2VsZXJhdGlvbl94GAogASgCEhYKDmFjY2VsZXJh",
            "dGlvbl95GAsgASgCEhYKDmFjY2VsZXJhdGlvbl96GAwgASgCGoIBCg9Nb3Rv",
            "ckNvbnRyb2xsZXISHAoUaW50ZXJuYWxfdGVtcGVyYXR1cmUYASABKAISGQoR",
            "aW50ZXJuYWxfcHJlc3N1cmUYAiABKAISGgoSZWxlY3RyaWNhbF9jdXJyZW50",
            "GAMgASgCEhoKEmVsZWN0cmljYWxfdGVuc2lvbhgEIAEoAhphCgpMb2NvbW90",
            "aXZlEigKEGN5bGluZGVyX2ZvcndhcmQYASABKA4yDi5DeWxpbmRlclN0YXRl",
            "EikKEWN5bGluZGVyX2JhY2t3YXJkGAIgASgOMg4uQ3lsaW5kZXJTdGF0ZRq3",
            "DgoLUHVtcHNFbmdpbmUSUQoXZW5jX21hbmlmb2xkXzFfYmFja3dhcmQYASAB",
            "KAsyMC5Bbm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUuTWFuaWZvbGRfMV9C",
            "YWNrd2FyZBJRChdlbmNfbWFuaWZvbGRfM19iYWNrd2FyZBgCIAEoCzIwLkFu",
            "bmVsaWRhU2Vuc29ycy5QdW1wc0VuZ2luZS5NYW5pZm9sZF8zX0JhY2t3YXJk",
            "EkIKEGVuY19tb3Rvcl9ib21iXzEYAyABKAsyKC5Bbm5lbGlkYVNlbnNvcnMu",
            "UHVtcHNFbmdpbmUuTW90b3JCb21iXzESQgoQZW5jX21vdG9yX2JvbWJfMhgE",
            "IAEoCzIoLkFubmVsaWRhU2Vuc29ycy5QdW1wc0VuZ2luZS5Nb3RvckJvbWJf",
            "MhJRChdlbmNfbWFuaWZvbGRfMl9hdXhpbGlhchgFIAEoCzIwLkFubmVsaWRh",
            "U2Vuc29ycy5QdW1wc0VuZ2luZS5NYW5pZm9sZF8yX0F1eGlsaWFyEk8KF2Vu",
            "Y19tb3Rvcl9ib21iX2F1eGlsaWFyGAYgASgLMi4uQW5uZWxpZGFTZW5zb3Jz",
            "LlB1bXBzRW5naW5lLk1vdG9yQm9tYkF1eGlsaWFyEkkKE2VuY19tYW5pZm9s",
            "ZF8yX21haW4YByABKAsyLC5Bbm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUu",
            "TWFuaWZvbGRfMl9NYWluEkIKEGVuY19tb3Rvcl9ib21iXzMYCCABKAsyKC5B",
            "bm5lbGlkYVNlbnNvcnMuUHVtcHNFbmdpbmUuTW90b3JCb21iXzMSQgoQZW5j",
            "X21vdG9yX2JvbWJfNBgJIAEoCzIoLkFubmVsaWRhU2Vuc29ycy5QdW1wc0Vu",
            "Z2luZS5Nb3RvckJvbWJfNBJPChZlbmNfbWFuaWZvbGRfM19mb3J3YXJkGAog",
            "ASgLMi8uQW5uZWxpZGFTZW5zb3JzLlB1bXBzRW5naW5lLk1hbmlmb2xkXzNf",
            "Rm9yd2FyZBJPChZlbmNfbWFuaWZvbGRfMV9mb3J3YXJkGAsgASgLMi8uQW5u",
            "ZWxpZGFTZW5zb3JzLlB1bXBzRW5naW5lLk1hbmlmb2xkXzFfRm9yd2FyZBqJ",
            "AQoTTWFuaWZvbGRfMV9CYWNrd2FyZBI3Ch9zb2xlbm9pZF9jeWxpbmRlcl9t",
            "b3ZlX2JhY2t3YXJkGAEgASgOMg4uU29sZW5vaWRTdGF0ZRI5CiFzb2xlbm9p",
            "ZF9jeWxpbmRlcl9hY3RpdmVfYmFja3dhcmQYAiABKA4yDi5Tb2xlbm9pZFN0",
            "YXRlGkwKE01hbmlmb2xkXzNfQmFja3dhcmQSNQodc29sZW5vaWRfYWN0aXZl",
            "X2Zvb3RfYmFja3dhcmQYASABKA4yDi5Tb2xlbm9pZFN0YXRlGk4KC01vdG9y",
            "Qm9tYl8xEhcKD29pbF90ZW1wZXJhdHVyZRgBIAEoAhIRCgltb3Rvcl9ycG0Y",
            "AiABKA0SEwoLbW90b3JfcG93ZXIYAyABKAIaNQoLTW90b3JCb21iXzISEQoJ",
            "bW90b3JfcnBtGAEgASgNEhMKC21vdG9yX3Bvd2VyGAIgASgCGmgKE01hbmlm",
            "b2xkXzJfQXV4aWxpYXISIAoYaHlkcmF1bGljX2Zvb3RzX3ByZXNzdXJlGAEg",
            "ASgCEi8KF3NvbGVub2lkX3ByZXNzdXJlX2Zvb3RzGAIgASgOMg4uU29sZW5v",
            "aWRTdGF0ZRpXChFNb3RvckJvbWJBdXhpbGlhchIaChJ0ZW1wZXJhdHVyZV9z",
            "ZW5zb3IYASABKAISEQoJbW90b3JfcnBtGAIgASgNEhMKC21vdG9yX3Bvd2Vy",
            "GAMgASgCGmYKD01hbmlmb2xkXzJfTWFpbhIjChtoeWRyYXVsaWNfY3lsaW5k",
            "ZXJfcHJlc3N1cmUYASABKAISLgoWc29sZW5vaWRfbW92ZV9wcmVzc3VyZRgC",
            "IAEoDjIOLlNvbGVub2lkU3RhdGUaNQoLTW90b3JCb21iXzMSEQoJbW90b3Jf",
            "cnBtGAEgASgCEhMKC21vdG9yX3Bvd2VyGAIgASgCGk4KC01vdG9yQm9tYl80",
            "EhcKD29pbF90ZW1wZXJhdHVyZRgBIAEoAhIRCgltb3Rvcl9ycG0YAiABKA0S",
            "EwoLbW90b3JfcG93ZXIYAyABKAIaRQoSTWFuaWZvbGRfM19Gb3J3YXJkEi8K",
            "F3NvbGVub2lkX2FjdGl2ZV9mb3J3YXJkGAEgASgOMg4uU29sZW5vaWRTdGF0",
            "ZRqGAQoSTWFuaWZvbGRfMV9Gb3J3YXJkEjYKHnNvbGVub2lkX2N5bGluZGVy",
            "X21vdmVfZm9yd2FyZBgBIAEoDjIOLlNvbGVub2lkU3RhdGUSOAogc29sZW5v",
            "aWRfY3lsaW5kZXJfYWN0aXZlX2ZvcndhcmQYAiABKA4yDi5Tb2xlbm9pZFN0",
            "YXRlGm4KClNnblJlYWN0b3ISFwoPc2duX3RlbXBlcmF0dXJlGAEgASgCEhwK",
            "FG9ic3RydWN0aW9uX2RldGVjdGVkGAIgASgIEhgKEHJlYWN0b3JfcHJlc3N1",
            "cmUYAyABKAISDwoHZmxvd1BXTRgEIAEoAio/Cg1Tb2xlbm9pZFN0YXRlEhMK",
            "D1VOS05PV19TT0xFTk9JRBAAEgsKB0FDVElWRUQQARIMCghESVNBQkxFRBAC",
            "KkEKDUN5bGluZGVyU3RhdGUSEwoPVU5LTk9XX0NZTElOREVSEAASDAoIQURW",
            "QU5DRUQQARINCglXSVRIRFJBV04QAkIsqgIpQW5uZWxpZGFEaXNwYXRjaGVy",
            "Lk1vZGVsLkRhdGFUcmFuc21pc3Npb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState), typeof(global::AnnelidaDispatcher.Model.DataTransmission.CylinderState), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Parser, new[]{ "Timestamp", "EncReception", "EncNotRegulated1", "EncNotRegulated2", "EncRegulated1", "EncRegulated2", "EncEmbeddedSystem", "EncMotorController1", "EncMotorController2", "EncMotorController3", "EncMotorController4", "EncMotorController5", "EncForwardLocomotive", "EncBackwardLocomotive", "SystemPumps", "EncReactor" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception.Parser, new[]{ "Traction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrentC1", "ElectricalCurrentC2", "ElectricalCurrentC3", "ElectricalPowerP1", "ElectricalPowerP2", "ElectricalPowerP3", "ElectricalTension700V" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrentC1", "ElectricalCurrentC2", "ElectricalCurrentC3", "ElectricalCurrentC4", "ElectricalPowerP1", "ElectricalPowerP2", "ElectricalPowerP3", "ElectricalPowerP4", "ElectricalTension" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem.Parser, new[]{ "InternalTemperature", "InternalPressure", "ExternalModulePressure", "RotationX", "RotationY", "RotationZ", "DisplacementX", "DisplacementY", "DisplacementZ", "AccelerationX", "AccelerationY", "AccelerationZ" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController.Parser, new[]{ "InternalTemperature", "InternalPressure", "ElectricalCurrent", "ElectricalTension" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive.Parser, new[]{ "CylinderForward", "CylinderBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Parser, new[]{ "EncManifold1Backward", "EncManifold3Backward", "EncMotorBomb1", "EncMotorBomb2", "EncManifold2Auxiliar", "EncMotorBombAuxiliar", "EncManifold2Main", "EncMotorBomb3", "EncMotorBomb4", "EncManifold3Forward", "EncManifold1Forward" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward.Parser, new[]{ "SolenoidCylinderMoveBackward", "SolenoidCylinderActiveBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward.Parser, new[]{ "SolenoidActiveFootBackward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1.Parser, new[]{ "OilTemperature", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2.Parser, new[]{ "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar.Parser, new[]{ "HydraulicFootsPressure", "SolenoidPressureFoots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar.Parser, new[]{ "TemperatureSensor", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main.Parser, new[]{ "HydraulicCylinderPressure", "SolenoidMovePressure" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3.Parser, new[]{ "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4.Parser, new[]{ "OilTemperature", "MotorRpm", "MotorPower" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward.Parser, new[]{ "SolenoidActiveForward" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward.Parser, new[]{ "SolenoidCylinderMoveForward", "SolenoidCylinderActiveForward" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor), global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor.Parser, new[]{ "SgnTemperature", "ObstructionDetected", "ReactorPressure", "FlowPWM" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  public enum SolenoidState {
    [pbr::OriginalName("UNKNOW_SOLENOID")] UnknowSolenoid = 0,
    [pbr::OriginalName("ACTIVED")] Actived = 1,
    [pbr::OriginalName("DISABLED")] Disabled = 2,
  }

  public enum CylinderState {
    [pbr::OriginalName("UNKNOW_CYLINDER")] UnknowCylinder = 0,
    [pbr::OriginalName("ADVANCED")] Advanced = 1,
    [pbr::OriginalName("WITHDRAWN")] Withdrawn = 2,
  }

  #endregion

  #region Messages
  public sealed partial class AnnelidaSensors : pb::IMessage<AnnelidaSensors> {
    private static readonly pb::MessageParser<AnnelidaSensors> _parser = new pb::MessageParser<AnnelidaSensors>(() => new AnnelidaSensors());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnelidaSensors> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors(AnnelidaSensors other) : this() {
      Timestamp = other.timestamp_ != null ? other.Timestamp.Clone() : null;
      EncReception = other.encReception_ != null ? other.EncReception.Clone() : null;
      EncNotRegulated1 = other.encNotRegulated1_ != null ? other.EncNotRegulated1.Clone() : null;
      EncNotRegulated2 = other.encNotRegulated2_ != null ? other.EncNotRegulated2.Clone() : null;
      EncRegulated1 = other.encRegulated1_ != null ? other.EncRegulated1.Clone() : null;
      EncRegulated2 = other.encRegulated2_ != null ? other.EncRegulated2.Clone() : null;
      EncEmbeddedSystem = other.encEmbeddedSystem_ != null ? other.EncEmbeddedSystem.Clone() : null;
      EncMotorController1 = other.encMotorController1_ != null ? other.EncMotorController1.Clone() : null;
      EncMotorController2 = other.encMotorController2_ != null ? other.EncMotorController2.Clone() : null;
      EncMotorController3 = other.encMotorController3_ != null ? other.EncMotorController3.Clone() : null;
      EncMotorController4 = other.encMotorController4_ != null ? other.EncMotorController4.Clone() : null;
      EncMotorController5 = other.encMotorController5_ != null ? other.EncMotorController5.Clone() : null;
      EncForwardLocomotive = other.encForwardLocomotive_ != null ? other.EncForwardLocomotive.Clone() : null;
      EncBackwardLocomotive = other.encBackwardLocomotive_ != null ? other.EncBackwardLocomotive.Clone() : null;
      SystemPumps = other.systemPumps_ != null ? other.SystemPumps.Clone() : null;
      EncReactor = other.encReactor_ != null ? other.EncReactor.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnelidaSensors Clone() {
      return new AnnelidaSensors(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "enc_reception" field.</summary>
    public const int EncReceptionFieldNumber = 2;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception encReception_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception EncReception {
      get { return encReception_; }
      set {
        encReception_ = value;
      }
    }

    /// <summary>Field number for the "enc_not_regulated_1" field.</summary>
    public const int EncNotRegulated1FieldNumber = 3;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter encNotRegulated1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter EncNotRegulated1 {
      get { return encNotRegulated1_; }
      set {
        encNotRegulated1_ = value;
      }
    }

    /// <summary>Field number for the "enc_not_regulated_2" field.</summary>
    public const int EncNotRegulated2FieldNumber = 4;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter encNotRegulated2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter EncNotRegulated2 {
      get { return encNotRegulated2_; }
      set {
        encNotRegulated2_ = value;
      }
    }

    /// <summary>Field number for the "enc_regulated_1" field.</summary>
    public const int EncRegulated1FieldNumber = 5;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter encRegulated1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter EncRegulated1 {
      get { return encRegulated1_; }
      set {
        encRegulated1_ = value;
      }
    }

    /// <summary>Field number for the "enc_regulated_2" field.</summary>
    public const int EncRegulated2FieldNumber = 6;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter encRegulated2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter EncRegulated2 {
      get { return encRegulated2_; }
      set {
        encRegulated2_ = value;
      }
    }

    /// <summary>Field number for the "enc_embedded_system" field.</summary>
    public const int EncEmbeddedSystemFieldNumber = 7;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem encEmbeddedSystem_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem EncEmbeddedSystem {
      get { return encEmbeddedSystem_; }
      set {
        encEmbeddedSystem_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_1" field.</summary>
    public const int EncMotorController1FieldNumber = 8;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController1 {
      get { return encMotorController1_; }
      set {
        encMotorController1_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_2" field.</summary>
    public const int EncMotorController2FieldNumber = 9;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController2 {
      get { return encMotorController2_; }
      set {
        encMotorController2_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_3" field.</summary>
    public const int EncMotorController3FieldNumber = 10;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController3 {
      get { return encMotorController3_; }
      set {
        encMotorController3_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_4" field.</summary>
    public const int EncMotorController4FieldNumber = 11;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController4_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController4 {
      get { return encMotorController4_; }
      set {
        encMotorController4_ = value;
      }
    }

    /// <summary>Field number for the "enc_motor_controller_5" field.</summary>
    public const int EncMotorController5FieldNumber = 12;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController encMotorController5_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController EncMotorController5 {
      get { return encMotorController5_; }
      set {
        encMotorController5_ = value;
      }
    }

    /// <summary>Field number for the "enc_forward_locomotive" field.</summary>
    public const int EncForwardLocomotiveFieldNumber = 13;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive encForwardLocomotive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive EncForwardLocomotive {
      get { return encForwardLocomotive_; }
      set {
        encForwardLocomotive_ = value;
      }
    }

    /// <summary>Field number for the "enc_backward_locomotive" field.</summary>
    public const int EncBackwardLocomotiveFieldNumber = 14;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive encBackwardLocomotive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive EncBackwardLocomotive {
      get { return encBackwardLocomotive_; }
      set {
        encBackwardLocomotive_ = value;
      }
    }

    /// <summary>Field number for the "system_pumps" field.</summary>
    public const int SystemPumpsFieldNumber = 15;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine systemPumps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine SystemPumps {
      get { return systemPumps_; }
      set {
        systemPumps_ = value;
      }
    }

    /// <summary>Field number for the "enc_reactor" field.</summary>
    public const int EncReactorFieldNumber = 16;
    private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor encReactor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor EncReactor {
      get { return encReactor_; }
      set {
        encReactor_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnelidaSensors);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnelidaSensors other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (!object.Equals(EncReception, other.EncReception)) return false;
      if (!object.Equals(EncNotRegulated1, other.EncNotRegulated1)) return false;
      if (!object.Equals(EncNotRegulated2, other.EncNotRegulated2)) return false;
      if (!object.Equals(EncRegulated1, other.EncRegulated1)) return false;
      if (!object.Equals(EncRegulated2, other.EncRegulated2)) return false;
      if (!object.Equals(EncEmbeddedSystem, other.EncEmbeddedSystem)) return false;
      if (!object.Equals(EncMotorController1, other.EncMotorController1)) return false;
      if (!object.Equals(EncMotorController2, other.EncMotorController2)) return false;
      if (!object.Equals(EncMotorController3, other.EncMotorController3)) return false;
      if (!object.Equals(EncMotorController4, other.EncMotorController4)) return false;
      if (!object.Equals(EncMotorController5, other.EncMotorController5)) return false;
      if (!object.Equals(EncForwardLocomotive, other.EncForwardLocomotive)) return false;
      if (!object.Equals(EncBackwardLocomotive, other.EncBackwardLocomotive)) return false;
      if (!object.Equals(SystemPumps, other.SystemPumps)) return false;
      if (!object.Equals(EncReactor, other.EncReactor)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (encReception_ != null) hash ^= EncReception.GetHashCode();
      if (encNotRegulated1_ != null) hash ^= EncNotRegulated1.GetHashCode();
      if (encNotRegulated2_ != null) hash ^= EncNotRegulated2.GetHashCode();
      if (encRegulated1_ != null) hash ^= EncRegulated1.GetHashCode();
      if (encRegulated2_ != null) hash ^= EncRegulated2.GetHashCode();
      if (encEmbeddedSystem_ != null) hash ^= EncEmbeddedSystem.GetHashCode();
      if (encMotorController1_ != null) hash ^= EncMotorController1.GetHashCode();
      if (encMotorController2_ != null) hash ^= EncMotorController2.GetHashCode();
      if (encMotorController3_ != null) hash ^= EncMotorController3.GetHashCode();
      if (encMotorController4_ != null) hash ^= EncMotorController4.GetHashCode();
      if (encMotorController5_ != null) hash ^= EncMotorController5.GetHashCode();
      if (encForwardLocomotive_ != null) hash ^= EncForwardLocomotive.GetHashCode();
      if (encBackwardLocomotive_ != null) hash ^= EncBackwardLocomotive.GetHashCode();
      if (systemPumps_ != null) hash ^= SystemPumps.GetHashCode();
      if (encReactor_ != null) hash ^= EncReactor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (timestamp_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Timestamp);
      }
      if (encReception_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EncReception);
      }
      if (encNotRegulated1_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EncNotRegulated1);
      }
      if (encNotRegulated2_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(EncNotRegulated2);
      }
      if (encRegulated1_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(EncRegulated1);
      }
      if (encRegulated2_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(EncRegulated2);
      }
      if (encEmbeddedSystem_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(EncEmbeddedSystem);
      }
      if (encMotorController1_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(EncMotorController1);
      }
      if (encMotorController2_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(EncMotorController2);
      }
      if (encMotorController3_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(EncMotorController3);
      }
      if (encMotorController4_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(EncMotorController4);
      }
      if (encMotorController5_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EncMotorController5);
      }
      if (encForwardLocomotive_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(EncForwardLocomotive);
      }
      if (encBackwardLocomotive_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EncBackwardLocomotive);
      }
      if (systemPumps_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(SystemPumps);
      }
      if (encReactor_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(EncReactor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (encReception_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncReception);
      }
      if (encNotRegulated1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncNotRegulated1);
      }
      if (encNotRegulated2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncNotRegulated2);
      }
      if (encRegulated1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncRegulated1);
      }
      if (encRegulated2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncRegulated2);
      }
      if (encEmbeddedSystem_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncEmbeddedSystem);
      }
      if (encMotorController1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController1);
      }
      if (encMotorController2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController2);
      }
      if (encMotorController3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController3);
      }
      if (encMotorController4_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController4);
      }
      if (encMotorController5_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorController5);
      }
      if (encForwardLocomotive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncForwardLocomotive);
      }
      if (encBackwardLocomotive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncBackwardLocomotive);
      }
      if (systemPumps_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SystemPumps);
      }
      if (encReactor_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EncReactor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnelidaSensors other) {
      if (other == null) {
        return;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.encReception_ != null) {
        if (encReception_ == null) {
          encReception_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception();
        }
        EncReception.MergeFrom(other.EncReception);
      }
      if (other.encNotRegulated1_ != null) {
        if (encNotRegulated1_ == null) {
          encNotRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
        }
        EncNotRegulated1.MergeFrom(other.EncNotRegulated1);
      }
      if (other.encNotRegulated2_ != null) {
        if (encNotRegulated2_ == null) {
          encNotRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
        }
        EncNotRegulated2.MergeFrom(other.EncNotRegulated2);
      }
      if (other.encRegulated1_ != null) {
        if (encRegulated1_ == null) {
          encRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
        }
        EncRegulated1.MergeFrom(other.EncRegulated1);
      }
      if (other.encRegulated2_ != null) {
        if (encRegulated2_ == null) {
          encRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
        }
        EncRegulated2.MergeFrom(other.EncRegulated2);
      }
      if (other.encEmbeddedSystem_ != null) {
        if (encEmbeddedSystem_ == null) {
          encEmbeddedSystem_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem();
        }
        EncEmbeddedSystem.MergeFrom(other.EncEmbeddedSystem);
      }
      if (other.encMotorController1_ != null) {
        if (encMotorController1_ == null) {
          encMotorController1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController1.MergeFrom(other.EncMotorController1);
      }
      if (other.encMotorController2_ != null) {
        if (encMotorController2_ == null) {
          encMotorController2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController2.MergeFrom(other.EncMotorController2);
      }
      if (other.encMotorController3_ != null) {
        if (encMotorController3_ == null) {
          encMotorController3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController3.MergeFrom(other.EncMotorController3);
      }
      if (other.encMotorController4_ != null) {
        if (encMotorController4_ == null) {
          encMotorController4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController4.MergeFrom(other.EncMotorController4);
      }
      if (other.encMotorController5_ != null) {
        if (encMotorController5_ == null) {
          encMotorController5_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
        }
        EncMotorController5.MergeFrom(other.EncMotorController5);
      }
      if (other.encForwardLocomotive_ != null) {
        if (encForwardLocomotive_ == null) {
          encForwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
        }
        EncForwardLocomotive.MergeFrom(other.EncForwardLocomotive);
      }
      if (other.encBackwardLocomotive_ != null) {
        if (encBackwardLocomotive_ == null) {
          encBackwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
        }
        EncBackwardLocomotive.MergeFrom(other.EncBackwardLocomotive);
      }
      if (other.systemPumps_ != null) {
        if (systemPumps_ == null) {
          systemPumps_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine();
        }
        SystemPumps.MergeFrom(other.SystemPumps);
      }
      if (other.encReactor_ != null) {
        if (encReactor_ == null) {
          encReactor_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor();
        }
        EncReactor.MergeFrom(other.EncReactor);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timestamp_ == null) {
              timestamp_ = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(timestamp_);
            break;
          }
          case 18: {
            if (encReception_ == null) {
              encReception_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.UmbilicalReception();
            }
            input.ReadMessage(encReception_);
            break;
          }
          case 26: {
            if (encNotRegulated1_ == null) {
              encNotRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
            }
            input.ReadMessage(encNotRegulated1_);
            break;
          }
          case 34: {
            if (encNotRegulated2_ == null) {
              encNotRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.NotRegulatedConverter();
            }
            input.ReadMessage(encNotRegulated2_);
            break;
          }
          case 42: {
            if (encRegulated1_ == null) {
              encRegulated1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
            }
            input.ReadMessage(encRegulated1_);
            break;
          }
          case 50: {
            if (encRegulated2_ == null) {
              encRegulated2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.RegulatedConverter();
            }
            input.ReadMessage(encRegulated2_);
            break;
          }
          case 58: {
            if (encEmbeddedSystem_ == null) {
              encEmbeddedSystem_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.EmbeddedSystem();
            }
            input.ReadMessage(encEmbeddedSystem_);
            break;
          }
          case 66: {
            if (encMotorController1_ == null) {
              encMotorController1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController1_);
            break;
          }
          case 74: {
            if (encMotorController2_ == null) {
              encMotorController2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController2_);
            break;
          }
          case 82: {
            if (encMotorController3_ == null) {
              encMotorController3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController3_);
            break;
          }
          case 90: {
            if (encMotorController4_ == null) {
              encMotorController4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController4_);
            break;
          }
          case 98: {
            if (encMotorController5_ == null) {
              encMotorController5_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.MotorController();
            }
            input.ReadMessage(encMotorController5_);
            break;
          }
          case 106: {
            if (encForwardLocomotive_ == null) {
              encForwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
            }
            input.ReadMessage(encForwardLocomotive_);
            break;
          }
          case 114: {
            if (encBackwardLocomotive_ == null) {
              encBackwardLocomotive_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.Locomotive();
            }
            input.ReadMessage(encBackwardLocomotive_);
            break;
          }
          case 122: {
            if (systemPumps_ == null) {
              systemPumps_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine();
            }
            input.ReadMessage(systemPumps_);
            break;
          }
          case 130: {
            if (encReactor_ == null) {
              encReactor_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.SgnReactor();
            }
            input.ReadMessage(encReactor_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AnnelidaSensors message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class UmbilicalReception : pb::IMessage<UmbilicalReception> {
        private static readonly pb::MessageParser<UmbilicalReception> _parser = new pb::MessageParser<UmbilicalReception>(() => new UmbilicalReception());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<UmbilicalReception> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception(UmbilicalReception other) : this() {
          traction_ = other.traction_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public UmbilicalReception Clone() {
          return new UmbilicalReception(this);
        }

        /// <summary>Field number for the "traction" field.</summary>
        public const int TractionFieldNumber = 1;
        private uint traction_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Traction {
          get { return traction_; }
          set {
            traction_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as UmbilicalReception);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(UmbilicalReception other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Traction != other.Traction) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Traction != 0) hash ^= Traction.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Traction != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Traction);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Traction != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Traction);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(UmbilicalReception other) {
          if (other == null) {
            return;
          }
          if (other.Traction != 0) {
            Traction = other.Traction;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Traction = input.ReadUInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class NotRegulatedConverter : pb::IMessage<NotRegulatedConverter> {
        private static readonly pb::MessageParser<NotRegulatedConverter> _parser = new pb::MessageParser<NotRegulatedConverter>(() => new NotRegulatedConverter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<NotRegulatedConverter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter(NotRegulatedConverter other) : this() {
          internalTemperature_ = other.internalTemperature_;
          internalPressure_ = other.internalPressure_;
          electricalCurrentC1_ = other.electricalCurrentC1_;
          electricalCurrentC2_ = other.electricalCurrentC2_;
          electricalCurrentC3_ = other.electricalCurrentC3_;
          electricalPowerP1_ = other.electricalPowerP1_;
          electricalPowerP2_ = other.electricalPowerP2_;
          electricalPowerP3_ = other.electricalPowerP3_;
          electricalTension700V_ = other.electricalTension700V_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public NotRegulatedConverter Clone() {
          return new NotRegulatedConverter(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private float internalTemperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalTemperature {
          get { return internalTemperature_; }
          set {
            internalTemperature_ = value;
          }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private float internalPressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalPressure {
          get { return internalPressure_; }
          set {
            internalPressure_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c1" field.</summary>
        public const int ElectricalCurrentC1FieldNumber = 3;
        private float electricalCurrentC1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC1 {
          get { return electricalCurrentC1_; }
          set {
            electricalCurrentC1_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c2" field.</summary>
        public const int ElectricalCurrentC2FieldNumber = 4;
        private float electricalCurrentC2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC2 {
          get { return electricalCurrentC2_; }
          set {
            electricalCurrentC2_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c3" field.</summary>
        public const int ElectricalCurrentC3FieldNumber = 5;
        private float electricalCurrentC3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC3 {
          get { return electricalCurrentC3_; }
          set {
            electricalCurrentC3_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p1" field.</summary>
        public const int ElectricalPowerP1FieldNumber = 6;
        private float electricalPowerP1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP1 {
          get { return electricalPowerP1_; }
          set {
            electricalPowerP1_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p2" field.</summary>
        public const int ElectricalPowerP2FieldNumber = 7;
        private float electricalPowerP2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP2 {
          get { return electricalPowerP2_; }
          set {
            electricalPowerP2_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p3" field.</summary>
        public const int ElectricalPowerP3FieldNumber = 8;
        private float electricalPowerP3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP3 {
          get { return electricalPowerP3_; }
          set {
            electricalPowerP3_ = value;
          }
        }

        /// <summary>Field number for the "electrical_tension_700v" field.</summary>
        public const int ElectricalTension700VFieldNumber = 9;
        private float electricalTension700V_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalTension700V {
          get { return electricalTension700V_; }
          set {
            electricalTension700V_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as NotRegulatedConverter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(NotRegulatedConverter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalTemperature, other.InternalTemperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalPressure, other.InternalPressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC1, other.ElectricalCurrentC1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC2, other.ElectricalCurrentC2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC3, other.ElectricalCurrentC3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP1, other.ElectricalPowerP1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP2, other.ElectricalPowerP2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP3, other.ElectricalPowerP3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalTension700V, other.ElectricalTension700V)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InternalTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalTemperature);
          if (InternalPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalPressure);
          if (ElectricalCurrentC1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC1);
          if (ElectricalCurrentC2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC2);
          if (ElectricalCurrentC3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC3);
          if (ElectricalPowerP1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP1);
          if (ElectricalPowerP2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP2);
          if (ElectricalPowerP3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP3);
          if (ElectricalTension700V != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalTension700V);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InternalTemperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(InternalTemperature);
          }
          if (InternalPressure != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(InternalPressure);
          }
          if (ElectricalCurrentC1 != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ElectricalCurrentC1);
          }
          if (ElectricalCurrentC2 != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(ElectricalCurrentC2);
          }
          if (ElectricalCurrentC3 != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(ElectricalCurrentC3);
          }
          if (ElectricalPowerP1 != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(ElectricalPowerP1);
          }
          if (ElectricalPowerP2 != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(ElectricalPowerP2);
          }
          if (ElectricalPowerP3 != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(ElectricalPowerP3);
          }
          if (ElectricalTension700V != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(ElectricalTension700V);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InternalTemperature != 0F) {
            size += 1 + 4;
          }
          if (InternalPressure != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC1 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC2 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC3 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP1 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP2 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP3 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalTension700V != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(NotRegulatedConverter other) {
          if (other == null) {
            return;
          }
          if (other.InternalTemperature != 0F) {
            InternalTemperature = other.InternalTemperature;
          }
          if (other.InternalPressure != 0F) {
            InternalPressure = other.InternalPressure;
          }
          if (other.ElectricalCurrentC1 != 0F) {
            ElectricalCurrentC1 = other.ElectricalCurrentC1;
          }
          if (other.ElectricalCurrentC2 != 0F) {
            ElectricalCurrentC2 = other.ElectricalCurrentC2;
          }
          if (other.ElectricalCurrentC3 != 0F) {
            ElectricalCurrentC3 = other.ElectricalCurrentC3;
          }
          if (other.ElectricalPowerP1 != 0F) {
            ElectricalPowerP1 = other.ElectricalPowerP1;
          }
          if (other.ElectricalPowerP2 != 0F) {
            ElectricalPowerP2 = other.ElectricalPowerP2;
          }
          if (other.ElectricalPowerP3 != 0F) {
            ElectricalPowerP3 = other.ElectricalPowerP3;
          }
          if (other.ElectricalTension700V != 0F) {
            ElectricalTension700V = other.ElectricalTension700V;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                InternalTemperature = input.ReadFloat();
                break;
              }
              case 21: {
                InternalPressure = input.ReadFloat();
                break;
              }
              case 29: {
                ElectricalCurrentC1 = input.ReadFloat();
                break;
              }
              case 37: {
                ElectricalCurrentC2 = input.ReadFloat();
                break;
              }
              case 45: {
                ElectricalCurrentC3 = input.ReadFloat();
                break;
              }
              case 53: {
                ElectricalPowerP1 = input.ReadFloat();
                break;
              }
              case 61: {
                ElectricalPowerP2 = input.ReadFloat();
                break;
              }
              case 69: {
                ElectricalPowerP3 = input.ReadFloat();
                break;
              }
              case 77: {
                ElectricalTension700V = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class RegulatedConverter : pb::IMessage<RegulatedConverter> {
        private static readonly pb::MessageParser<RegulatedConverter> _parser = new pb::MessageParser<RegulatedConverter>(() => new RegulatedConverter());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<RegulatedConverter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter(RegulatedConverter other) : this() {
          internalTemperature_ = other.internalTemperature_;
          internalPressure_ = other.internalPressure_;
          electricalCurrentC1_ = other.electricalCurrentC1_;
          electricalCurrentC2_ = other.electricalCurrentC2_;
          electricalCurrentC3_ = other.electricalCurrentC3_;
          electricalCurrentC4_ = other.electricalCurrentC4_;
          electricalPowerP1_ = other.electricalPowerP1_;
          electricalPowerP2_ = other.electricalPowerP2_;
          electricalPowerP3_ = other.electricalPowerP3_;
          electricalPowerP4_ = other.electricalPowerP4_;
          electricalTension_ = other.electricalTension_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public RegulatedConverter Clone() {
          return new RegulatedConverter(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private float internalTemperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalTemperature {
          get { return internalTemperature_; }
          set {
            internalTemperature_ = value;
          }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private float internalPressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalPressure {
          get { return internalPressure_; }
          set {
            internalPressure_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c1" field.</summary>
        public const int ElectricalCurrentC1FieldNumber = 3;
        private float electricalCurrentC1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC1 {
          get { return electricalCurrentC1_; }
          set {
            electricalCurrentC1_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c2" field.</summary>
        public const int ElectricalCurrentC2FieldNumber = 4;
        private float electricalCurrentC2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC2 {
          get { return electricalCurrentC2_; }
          set {
            electricalCurrentC2_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c3" field.</summary>
        public const int ElectricalCurrentC3FieldNumber = 5;
        private float electricalCurrentC3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC3 {
          get { return electricalCurrentC3_; }
          set {
            electricalCurrentC3_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current_c4" field.</summary>
        public const int ElectricalCurrentC4FieldNumber = 6;
        private float electricalCurrentC4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrentC4 {
          get { return electricalCurrentC4_; }
          set {
            electricalCurrentC4_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p1" field.</summary>
        public const int ElectricalPowerP1FieldNumber = 7;
        private float electricalPowerP1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP1 {
          get { return electricalPowerP1_; }
          set {
            electricalPowerP1_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p2" field.</summary>
        public const int ElectricalPowerP2FieldNumber = 8;
        private float electricalPowerP2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP2 {
          get { return electricalPowerP2_; }
          set {
            electricalPowerP2_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p3" field.</summary>
        public const int ElectricalPowerP3FieldNumber = 9;
        private float electricalPowerP3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP3 {
          get { return electricalPowerP3_; }
          set {
            electricalPowerP3_ = value;
          }
        }

        /// <summary>Field number for the "electrical_power_p4" field.</summary>
        public const int ElectricalPowerP4FieldNumber = 10;
        private float electricalPowerP4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalPowerP4 {
          get { return electricalPowerP4_; }
          set {
            electricalPowerP4_ = value;
          }
        }

        /// <summary>Field number for the "electrical_tension" field.</summary>
        public const int ElectricalTensionFieldNumber = 11;
        private float electricalTension_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalTension {
          get { return electricalTension_; }
          set {
            electricalTension_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as RegulatedConverter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(RegulatedConverter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalTemperature, other.InternalTemperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalPressure, other.InternalPressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC1, other.ElectricalCurrentC1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC2, other.ElectricalCurrentC2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC3, other.ElectricalCurrentC3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrentC4, other.ElectricalCurrentC4)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP1, other.ElectricalPowerP1)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP2, other.ElectricalPowerP2)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP3, other.ElectricalPowerP3)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalPowerP4, other.ElectricalPowerP4)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalTension, other.ElectricalTension)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InternalTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalTemperature);
          if (InternalPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalPressure);
          if (ElectricalCurrentC1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC1);
          if (ElectricalCurrentC2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC2);
          if (ElectricalCurrentC3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC3);
          if (ElectricalCurrentC4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrentC4);
          if (ElectricalPowerP1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP1);
          if (ElectricalPowerP2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP2);
          if (ElectricalPowerP3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP3);
          if (ElectricalPowerP4 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalPowerP4);
          if (ElectricalTension != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalTension);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InternalTemperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(InternalTemperature);
          }
          if (InternalPressure != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(InternalPressure);
          }
          if (ElectricalCurrentC1 != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ElectricalCurrentC1);
          }
          if (ElectricalCurrentC2 != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(ElectricalCurrentC2);
          }
          if (ElectricalCurrentC3 != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(ElectricalCurrentC3);
          }
          if (ElectricalCurrentC4 != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(ElectricalCurrentC4);
          }
          if (ElectricalPowerP1 != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(ElectricalPowerP1);
          }
          if (ElectricalPowerP2 != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(ElectricalPowerP2);
          }
          if (ElectricalPowerP3 != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(ElectricalPowerP3);
          }
          if (ElectricalPowerP4 != 0F) {
            output.WriteRawTag(85);
            output.WriteFloat(ElectricalPowerP4);
          }
          if (ElectricalTension != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(ElectricalTension);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InternalTemperature != 0F) {
            size += 1 + 4;
          }
          if (InternalPressure != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC1 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC2 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC3 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrentC4 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP1 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP2 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP3 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalPowerP4 != 0F) {
            size += 1 + 4;
          }
          if (ElectricalTension != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(RegulatedConverter other) {
          if (other == null) {
            return;
          }
          if (other.InternalTemperature != 0F) {
            InternalTemperature = other.InternalTemperature;
          }
          if (other.InternalPressure != 0F) {
            InternalPressure = other.InternalPressure;
          }
          if (other.ElectricalCurrentC1 != 0F) {
            ElectricalCurrentC1 = other.ElectricalCurrentC1;
          }
          if (other.ElectricalCurrentC2 != 0F) {
            ElectricalCurrentC2 = other.ElectricalCurrentC2;
          }
          if (other.ElectricalCurrentC3 != 0F) {
            ElectricalCurrentC3 = other.ElectricalCurrentC3;
          }
          if (other.ElectricalCurrentC4 != 0F) {
            ElectricalCurrentC4 = other.ElectricalCurrentC4;
          }
          if (other.ElectricalPowerP1 != 0F) {
            ElectricalPowerP1 = other.ElectricalPowerP1;
          }
          if (other.ElectricalPowerP2 != 0F) {
            ElectricalPowerP2 = other.ElectricalPowerP2;
          }
          if (other.ElectricalPowerP3 != 0F) {
            ElectricalPowerP3 = other.ElectricalPowerP3;
          }
          if (other.ElectricalPowerP4 != 0F) {
            ElectricalPowerP4 = other.ElectricalPowerP4;
          }
          if (other.ElectricalTension != 0F) {
            ElectricalTension = other.ElectricalTension;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                InternalTemperature = input.ReadFloat();
                break;
              }
              case 21: {
                InternalPressure = input.ReadFloat();
                break;
              }
              case 29: {
                ElectricalCurrentC1 = input.ReadFloat();
                break;
              }
              case 37: {
                ElectricalCurrentC2 = input.ReadFloat();
                break;
              }
              case 45: {
                ElectricalCurrentC3 = input.ReadFloat();
                break;
              }
              case 53: {
                ElectricalCurrentC4 = input.ReadFloat();
                break;
              }
              case 61: {
                ElectricalPowerP1 = input.ReadFloat();
                break;
              }
              case 69: {
                ElectricalPowerP2 = input.ReadFloat();
                break;
              }
              case 77: {
                ElectricalPowerP3 = input.ReadFloat();
                break;
              }
              case 85: {
                ElectricalPowerP4 = input.ReadFloat();
                break;
              }
              case 93: {
                ElectricalTension = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class EmbeddedSystem : pb::IMessage<EmbeddedSystem> {
        private static readonly pb::MessageParser<EmbeddedSystem> _parser = new pb::MessageParser<EmbeddedSystem>(() => new EmbeddedSystem());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmbeddedSystem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem(EmbeddedSystem other) : this() {
          internalTemperature_ = other.internalTemperature_;
          internalPressure_ = other.internalPressure_;
          externalModulePressure_ = other.externalModulePressure_;
          rotationX_ = other.rotationX_;
          rotationY_ = other.rotationY_;
          rotationZ_ = other.rotationZ_;
          displacementX_ = other.displacementX_;
          displacementY_ = other.displacementY_;
          displacementZ_ = other.displacementZ_;
          accelerationX_ = other.accelerationX_;
          accelerationY_ = other.accelerationY_;
          accelerationZ_ = other.accelerationZ_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmbeddedSystem Clone() {
          return new EmbeddedSystem(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private float internalTemperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalTemperature {
          get { return internalTemperature_; }
          set {
            internalTemperature_ = value;
          }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private float internalPressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalPressure {
          get { return internalPressure_; }
          set {
            internalPressure_ = value;
          }
        }

        /// <summary>Field number for the "external_module_pressure" field.</summary>
        public const int ExternalModulePressureFieldNumber = 3;
        private float externalModulePressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ExternalModulePressure {
          get { return externalModulePressure_; }
          set {
            externalModulePressure_ = value;
          }
        }

        /// <summary>Field number for the "rotation_x" field.</summary>
        public const int RotationXFieldNumber = 4;
        private float rotationX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RotationX {
          get { return rotationX_; }
          set {
            rotationX_ = value;
          }
        }

        /// <summary>Field number for the "rotation_y" field.</summary>
        public const int RotationYFieldNumber = 5;
        private float rotationY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RotationY {
          get { return rotationY_; }
          set {
            rotationY_ = value;
          }
        }

        /// <summary>Field number for the "rotation_z" field.</summary>
        public const int RotationZFieldNumber = 6;
        private float rotationZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float RotationZ {
          get { return rotationZ_; }
          set {
            rotationZ_ = value;
          }
        }

        /// <summary>Field number for the "displacement_x" field.</summary>
        public const int DisplacementXFieldNumber = 7;
        private float displacementX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DisplacementX {
          get { return displacementX_; }
          set {
            displacementX_ = value;
          }
        }

        /// <summary>Field number for the "displacement_y" field.</summary>
        public const int DisplacementYFieldNumber = 8;
        private float displacementY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DisplacementY {
          get { return displacementY_; }
          set {
            displacementY_ = value;
          }
        }

        /// <summary>Field number for the "displacement_z" field.</summary>
        public const int DisplacementZFieldNumber = 9;
        private float displacementZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float DisplacementZ {
          get { return displacementZ_; }
          set {
            displacementZ_ = value;
          }
        }

        /// <summary>Field number for the "acceleration_x" field.</summary>
        public const int AccelerationXFieldNumber = 10;
        private float accelerationX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AccelerationX {
          get { return accelerationX_; }
          set {
            accelerationX_ = value;
          }
        }

        /// <summary>Field number for the "acceleration_y" field.</summary>
        public const int AccelerationYFieldNumber = 11;
        private float accelerationY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AccelerationY {
          get { return accelerationY_; }
          set {
            accelerationY_ = value;
          }
        }

        /// <summary>Field number for the "acceleration_z" field.</summary>
        public const int AccelerationZFieldNumber = 12;
        private float accelerationZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float AccelerationZ {
          get { return accelerationZ_; }
          set {
            accelerationZ_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmbeddedSystem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmbeddedSystem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalTemperature, other.InternalTemperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalPressure, other.InternalPressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExternalModulePressure, other.ExternalModulePressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationX, other.RotationX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationY, other.RotationY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotationZ, other.RotationZ)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplacementX, other.DisplacementX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplacementY, other.DisplacementY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DisplacementZ, other.DisplacementZ)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelerationX, other.AccelerationX)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelerationY, other.AccelerationY)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AccelerationZ, other.AccelerationZ)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InternalTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalTemperature);
          if (InternalPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalPressure);
          if (ExternalModulePressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExternalModulePressure);
          if (RotationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationX);
          if (RotationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationY);
          if (RotationZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotationZ);
          if (DisplacementX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplacementX);
          if (DisplacementY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplacementY);
          if (DisplacementZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DisplacementZ);
          if (AccelerationX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelerationX);
          if (AccelerationY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelerationY);
          if (AccelerationZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AccelerationZ);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InternalTemperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(InternalTemperature);
          }
          if (InternalPressure != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(InternalPressure);
          }
          if (ExternalModulePressure != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ExternalModulePressure);
          }
          if (RotationX != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(RotationX);
          }
          if (RotationY != 0F) {
            output.WriteRawTag(45);
            output.WriteFloat(RotationY);
          }
          if (RotationZ != 0F) {
            output.WriteRawTag(53);
            output.WriteFloat(RotationZ);
          }
          if (DisplacementX != 0F) {
            output.WriteRawTag(61);
            output.WriteFloat(DisplacementX);
          }
          if (DisplacementY != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(DisplacementY);
          }
          if (DisplacementZ != 0F) {
            output.WriteRawTag(77);
            output.WriteFloat(DisplacementZ);
          }
          if (AccelerationX != 0F) {
            output.WriteRawTag(85);
            output.WriteFloat(AccelerationX);
          }
          if (AccelerationY != 0F) {
            output.WriteRawTag(93);
            output.WriteFloat(AccelerationY);
          }
          if (AccelerationZ != 0F) {
            output.WriteRawTag(101);
            output.WriteFloat(AccelerationZ);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InternalTemperature != 0F) {
            size += 1 + 4;
          }
          if (InternalPressure != 0F) {
            size += 1 + 4;
          }
          if (ExternalModulePressure != 0F) {
            size += 1 + 4;
          }
          if (RotationX != 0F) {
            size += 1 + 4;
          }
          if (RotationY != 0F) {
            size += 1 + 4;
          }
          if (RotationZ != 0F) {
            size += 1 + 4;
          }
          if (DisplacementX != 0F) {
            size += 1 + 4;
          }
          if (DisplacementY != 0F) {
            size += 1 + 4;
          }
          if (DisplacementZ != 0F) {
            size += 1 + 4;
          }
          if (AccelerationX != 0F) {
            size += 1 + 4;
          }
          if (AccelerationY != 0F) {
            size += 1 + 4;
          }
          if (AccelerationZ != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmbeddedSystem other) {
          if (other == null) {
            return;
          }
          if (other.InternalTemperature != 0F) {
            InternalTemperature = other.InternalTemperature;
          }
          if (other.InternalPressure != 0F) {
            InternalPressure = other.InternalPressure;
          }
          if (other.ExternalModulePressure != 0F) {
            ExternalModulePressure = other.ExternalModulePressure;
          }
          if (other.RotationX != 0F) {
            RotationX = other.RotationX;
          }
          if (other.RotationY != 0F) {
            RotationY = other.RotationY;
          }
          if (other.RotationZ != 0F) {
            RotationZ = other.RotationZ;
          }
          if (other.DisplacementX != 0F) {
            DisplacementX = other.DisplacementX;
          }
          if (other.DisplacementY != 0F) {
            DisplacementY = other.DisplacementY;
          }
          if (other.DisplacementZ != 0F) {
            DisplacementZ = other.DisplacementZ;
          }
          if (other.AccelerationX != 0F) {
            AccelerationX = other.AccelerationX;
          }
          if (other.AccelerationY != 0F) {
            AccelerationY = other.AccelerationY;
          }
          if (other.AccelerationZ != 0F) {
            AccelerationZ = other.AccelerationZ;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                InternalTemperature = input.ReadFloat();
                break;
              }
              case 21: {
                InternalPressure = input.ReadFloat();
                break;
              }
              case 29: {
                ExternalModulePressure = input.ReadFloat();
                break;
              }
              case 37: {
                RotationX = input.ReadFloat();
                break;
              }
              case 45: {
                RotationY = input.ReadFloat();
                break;
              }
              case 53: {
                RotationZ = input.ReadFloat();
                break;
              }
              case 61: {
                DisplacementX = input.ReadFloat();
                break;
              }
              case 69: {
                DisplacementY = input.ReadFloat();
                break;
              }
              case 77: {
                DisplacementZ = input.ReadFloat();
                break;
              }
              case 85: {
                AccelerationX = input.ReadFloat();
                break;
              }
              case 93: {
                AccelerationY = input.ReadFloat();
                break;
              }
              case 101: {
                AccelerationZ = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class MotorController : pb::IMessage<MotorController> {
        private static readonly pb::MessageParser<MotorController> _parser = new pb::MessageParser<MotorController>(() => new MotorController());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<MotorController> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController(MotorController other) : this() {
          internalTemperature_ = other.internalTemperature_;
          internalPressure_ = other.internalPressure_;
          electricalCurrent_ = other.electricalCurrent_;
          electricalTension_ = other.electricalTension_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public MotorController Clone() {
          return new MotorController(this);
        }

        /// <summary>Field number for the "internal_temperature" field.</summary>
        public const int InternalTemperatureFieldNumber = 1;
        private float internalTemperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalTemperature {
          get { return internalTemperature_; }
          set {
            internalTemperature_ = value;
          }
        }

        /// <summary>Field number for the "internal_pressure" field.</summary>
        public const int InternalPressureFieldNumber = 2;
        private float internalPressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float InternalPressure {
          get { return internalPressure_; }
          set {
            internalPressure_ = value;
          }
        }

        /// <summary>Field number for the "electrical_current" field.</summary>
        public const int ElectricalCurrentFieldNumber = 3;
        private float electricalCurrent_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalCurrent {
          get { return electricalCurrent_; }
          set {
            electricalCurrent_ = value;
          }
        }

        /// <summary>Field number for the "electrical_tension" field.</summary>
        public const int ElectricalTensionFieldNumber = 4;
        private float electricalTension_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ElectricalTension {
          get { return electricalTension_; }
          set {
            electricalTension_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as MotorController);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(MotorController other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalTemperature, other.InternalTemperature)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InternalPressure, other.InternalPressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalCurrent, other.ElectricalCurrent)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ElectricalTension, other.ElectricalTension)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (InternalTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalTemperature);
          if (InternalPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InternalPressure);
          if (ElectricalCurrent != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalCurrent);
          if (ElectricalTension != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ElectricalTension);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (InternalTemperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(InternalTemperature);
          }
          if (InternalPressure != 0F) {
            output.WriteRawTag(21);
            output.WriteFloat(InternalPressure);
          }
          if (ElectricalCurrent != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ElectricalCurrent);
          }
          if (ElectricalTension != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(ElectricalTension);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (InternalTemperature != 0F) {
            size += 1 + 4;
          }
          if (InternalPressure != 0F) {
            size += 1 + 4;
          }
          if (ElectricalCurrent != 0F) {
            size += 1 + 4;
          }
          if (ElectricalTension != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(MotorController other) {
          if (other == null) {
            return;
          }
          if (other.InternalTemperature != 0F) {
            InternalTemperature = other.InternalTemperature;
          }
          if (other.InternalPressure != 0F) {
            InternalPressure = other.InternalPressure;
          }
          if (other.ElectricalCurrent != 0F) {
            ElectricalCurrent = other.ElectricalCurrent;
          }
          if (other.ElectricalTension != 0F) {
            ElectricalTension = other.ElectricalTension;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                InternalTemperature = input.ReadFloat();
                break;
              }
              case 21: {
                InternalPressure = input.ReadFloat();
                break;
              }
              case 29: {
                ElectricalCurrent = input.ReadFloat();
                break;
              }
              case 37: {
                ElectricalTension = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Locomotive : pb::IMessage<Locomotive> {
        private static readonly pb::MessageParser<Locomotive> _parser = new pb::MessageParser<Locomotive>(() => new Locomotive());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Locomotive> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive(Locomotive other) : this() {
          cylinderForward_ = other.cylinderForward_;
          cylinderBackward_ = other.cylinderBackward_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Locomotive Clone() {
          return new Locomotive(this);
        }

        /// <summary>Field number for the "cylinder_forward" field.</summary>
        public const int CylinderForwardFieldNumber = 1;
        private global::AnnelidaDispatcher.Model.DataTransmission.CylinderState cylinderForward_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.CylinderState CylinderForward {
          get { return cylinderForward_; }
          set {
            cylinderForward_ = value;
          }
        }

        /// <summary>Field number for the "cylinder_backward" field.</summary>
        public const int CylinderBackwardFieldNumber = 2;
        private global::AnnelidaDispatcher.Model.DataTransmission.CylinderState cylinderBackward_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.CylinderState CylinderBackward {
          get { return cylinderBackward_; }
          set {
            cylinderBackward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Locomotive);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Locomotive other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (CylinderForward != other.CylinderForward) return false;
          if (CylinderBackward != other.CylinderBackward) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (CylinderForward != 0) hash ^= CylinderForward.GetHashCode();
          if (CylinderBackward != 0) hash ^= CylinderBackward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (CylinderForward != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) CylinderForward);
          }
          if (CylinderBackward != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) CylinderBackward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (CylinderForward != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CylinderForward);
          }
          if (CylinderBackward != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CylinderBackward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Locomotive other) {
          if (other == null) {
            return;
          }
          if (other.CylinderForward != 0) {
            CylinderForward = other.CylinderForward;
          }
          if (other.CylinderBackward != 0) {
            CylinderBackward = other.CylinderBackward;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                cylinderForward_ = (global::AnnelidaDispatcher.Model.DataTransmission.CylinderState) input.ReadEnum();
                break;
              }
              case 16: {
                cylinderBackward_ = (global::AnnelidaDispatcher.Model.DataTransmission.CylinderState) input.ReadEnum();
                break;
              }
            }
          }
        }

      }

      public sealed partial class PumpsEngine : pb::IMessage<PumpsEngine> {
        private static readonly pb::MessageParser<PumpsEngine> _parser = new pb::MessageParser<PumpsEngine>(() => new PumpsEngine());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<PumpsEngine> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine(PumpsEngine other) : this() {
          EncManifold1Backward = other.encManifold1Backward_ != null ? other.EncManifold1Backward.Clone() : null;
          EncManifold3Backward = other.encManifold3Backward_ != null ? other.EncManifold3Backward.Clone() : null;
          EncMotorBomb1 = other.encMotorBomb1_ != null ? other.EncMotorBomb1.Clone() : null;
          EncMotorBomb2 = other.encMotorBomb2_ != null ? other.EncMotorBomb2.Clone() : null;
          EncManifold2Auxiliar = other.encManifold2Auxiliar_ != null ? other.EncManifold2Auxiliar.Clone() : null;
          EncMotorBombAuxiliar = other.encMotorBombAuxiliar_ != null ? other.EncMotorBombAuxiliar.Clone() : null;
          EncManifold2Main = other.encManifold2Main_ != null ? other.EncManifold2Main.Clone() : null;
          EncMotorBomb3 = other.encMotorBomb3_ != null ? other.EncMotorBomb3.Clone() : null;
          EncMotorBomb4 = other.encMotorBomb4_ != null ? other.EncMotorBomb4.Clone() : null;
          EncManifold3Forward = other.encManifold3Forward_ != null ? other.EncManifold3Forward.Clone() : null;
          EncManifold1Forward = other.encManifold1Forward_ != null ? other.EncManifold1Forward.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public PumpsEngine Clone() {
          return new PumpsEngine(this);
        }

        /// <summary>Field number for the "enc_manifold_1_backward" field.</summary>
        public const int EncManifold1BackwardFieldNumber = 1;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward encManifold1Backward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward EncManifold1Backward {
          get { return encManifold1Backward_; }
          set {
            encManifold1Backward_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_3_backward" field.</summary>
        public const int EncManifold3BackwardFieldNumber = 2;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward encManifold3Backward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward EncManifold3Backward {
          get { return encManifold3Backward_; }
          set {
            encManifold3Backward_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_1" field.</summary>
        public const int EncMotorBomb1FieldNumber = 3;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1 encMotorBomb1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1 EncMotorBomb1 {
          get { return encMotorBomb1_; }
          set {
            encMotorBomb1_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_2" field.</summary>
        public const int EncMotorBomb2FieldNumber = 4;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2 encMotorBomb2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2 EncMotorBomb2 {
          get { return encMotorBomb2_; }
          set {
            encMotorBomb2_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_2_auxiliar" field.</summary>
        public const int EncManifold2AuxiliarFieldNumber = 5;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar encManifold2Auxiliar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar EncManifold2Auxiliar {
          get { return encManifold2Auxiliar_; }
          set {
            encManifold2Auxiliar_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_auxiliar" field.</summary>
        public const int EncMotorBombAuxiliarFieldNumber = 6;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar encMotorBombAuxiliar_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar EncMotorBombAuxiliar {
          get { return encMotorBombAuxiliar_; }
          set {
            encMotorBombAuxiliar_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_2_main" field.</summary>
        public const int EncManifold2MainFieldNumber = 7;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main encManifold2Main_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main EncManifold2Main {
          get { return encManifold2Main_; }
          set {
            encManifold2Main_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_3" field.</summary>
        public const int EncMotorBomb3FieldNumber = 8;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3 encMotorBomb3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3 EncMotorBomb3 {
          get { return encMotorBomb3_; }
          set {
            encMotorBomb3_ = value;
          }
        }

        /// <summary>Field number for the "enc_motor_bomb_4" field.</summary>
        public const int EncMotorBomb4FieldNumber = 9;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4 encMotorBomb4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4 EncMotorBomb4 {
          get { return encMotorBomb4_; }
          set {
            encMotorBomb4_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_3_forward" field.</summary>
        public const int EncManifold3ForwardFieldNumber = 10;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward encManifold3Forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward EncManifold3Forward {
          get { return encManifold3Forward_; }
          set {
            encManifold3Forward_ = value;
          }
        }

        /// <summary>Field number for the "enc_manifold_1_forward" field.</summary>
        public const int EncManifold1ForwardFieldNumber = 11;
        private global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward encManifold1Forward_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward EncManifold1Forward {
          get { return encManifold1Forward_; }
          set {
            encManifold1Forward_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as PumpsEngine);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(PumpsEngine other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(EncManifold1Backward, other.EncManifold1Backward)) return false;
          if (!object.Equals(EncManifold3Backward, other.EncManifold3Backward)) return false;
          if (!object.Equals(EncMotorBomb1, other.EncMotorBomb1)) return false;
          if (!object.Equals(EncMotorBomb2, other.EncMotorBomb2)) return false;
          if (!object.Equals(EncManifold2Auxiliar, other.EncManifold2Auxiliar)) return false;
          if (!object.Equals(EncMotorBombAuxiliar, other.EncMotorBombAuxiliar)) return false;
          if (!object.Equals(EncManifold2Main, other.EncManifold2Main)) return false;
          if (!object.Equals(EncMotorBomb3, other.EncMotorBomb3)) return false;
          if (!object.Equals(EncMotorBomb4, other.EncMotorBomb4)) return false;
          if (!object.Equals(EncManifold3Forward, other.EncManifold3Forward)) return false;
          if (!object.Equals(EncManifold1Forward, other.EncManifold1Forward)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (encManifold1Backward_ != null) hash ^= EncManifold1Backward.GetHashCode();
          if (encManifold3Backward_ != null) hash ^= EncManifold3Backward.GetHashCode();
          if (encMotorBomb1_ != null) hash ^= EncMotorBomb1.GetHashCode();
          if (encMotorBomb2_ != null) hash ^= EncMotorBomb2.GetHashCode();
          if (encManifold2Auxiliar_ != null) hash ^= EncManifold2Auxiliar.GetHashCode();
          if (encMotorBombAuxiliar_ != null) hash ^= EncMotorBombAuxiliar.GetHashCode();
          if (encManifold2Main_ != null) hash ^= EncManifold2Main.GetHashCode();
          if (encMotorBomb3_ != null) hash ^= EncMotorBomb3.GetHashCode();
          if (encMotorBomb4_ != null) hash ^= EncMotorBomb4.GetHashCode();
          if (encManifold3Forward_ != null) hash ^= EncManifold3Forward.GetHashCode();
          if (encManifold1Forward_ != null) hash ^= EncManifold1Forward.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (encManifold1Backward_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(EncManifold1Backward);
          }
          if (encManifold3Backward_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(EncManifold3Backward);
          }
          if (encMotorBomb1_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(EncMotorBomb1);
          }
          if (encMotorBomb2_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(EncMotorBomb2);
          }
          if (encManifold2Auxiliar_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(EncManifold2Auxiliar);
          }
          if (encMotorBombAuxiliar_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(EncMotorBombAuxiliar);
          }
          if (encManifold2Main_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(EncManifold2Main);
          }
          if (encMotorBomb3_ != null) {
            output.WriteRawTag(66);
            output.WriteMessage(EncMotorBomb3);
          }
          if (encMotorBomb4_ != null) {
            output.WriteRawTag(74);
            output.WriteMessage(EncMotorBomb4);
          }
          if (encManifold3Forward_ != null) {
            output.WriteRawTag(82);
            output.WriteMessage(EncManifold3Forward);
          }
          if (encManifold1Forward_ != null) {
            output.WriteRawTag(90);
            output.WriteMessage(EncManifold1Forward);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (encManifold1Backward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold1Backward);
          }
          if (encManifold3Backward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold3Backward);
          }
          if (encMotorBomb1_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb1);
          }
          if (encMotorBomb2_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb2);
          }
          if (encManifold2Auxiliar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold2Auxiliar);
          }
          if (encMotorBombAuxiliar_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBombAuxiliar);
          }
          if (encManifold2Main_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold2Main);
          }
          if (encMotorBomb3_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb3);
          }
          if (encMotorBomb4_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncMotorBomb4);
          }
          if (encManifold3Forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold3Forward);
          }
          if (encManifold1Forward_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(EncManifold1Forward);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(PumpsEngine other) {
          if (other == null) {
            return;
          }
          if (other.encManifold1Backward_ != null) {
            if (encManifold1Backward_ == null) {
              encManifold1Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward();
            }
            EncManifold1Backward.MergeFrom(other.EncManifold1Backward);
          }
          if (other.encManifold3Backward_ != null) {
            if (encManifold3Backward_ == null) {
              encManifold3Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward();
            }
            EncManifold3Backward.MergeFrom(other.EncManifold3Backward);
          }
          if (other.encMotorBomb1_ != null) {
            if (encMotorBomb1_ == null) {
              encMotorBomb1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1();
            }
            EncMotorBomb1.MergeFrom(other.EncMotorBomb1);
          }
          if (other.encMotorBomb2_ != null) {
            if (encMotorBomb2_ == null) {
              encMotorBomb2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2();
            }
            EncMotorBomb2.MergeFrom(other.EncMotorBomb2);
          }
          if (other.encManifold2Auxiliar_ != null) {
            if (encManifold2Auxiliar_ == null) {
              encManifold2Auxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar();
            }
            EncManifold2Auxiliar.MergeFrom(other.EncManifold2Auxiliar);
          }
          if (other.encMotorBombAuxiliar_ != null) {
            if (encMotorBombAuxiliar_ == null) {
              encMotorBombAuxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar();
            }
            EncMotorBombAuxiliar.MergeFrom(other.EncMotorBombAuxiliar);
          }
          if (other.encManifold2Main_ != null) {
            if (encManifold2Main_ == null) {
              encManifold2Main_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main();
            }
            EncManifold2Main.MergeFrom(other.EncManifold2Main);
          }
          if (other.encMotorBomb3_ != null) {
            if (encMotorBomb3_ == null) {
              encMotorBomb3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3();
            }
            EncMotorBomb3.MergeFrom(other.EncMotorBomb3);
          }
          if (other.encMotorBomb4_ != null) {
            if (encMotorBomb4_ == null) {
              encMotorBomb4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4();
            }
            EncMotorBomb4.MergeFrom(other.EncMotorBomb4);
          }
          if (other.encManifold3Forward_ != null) {
            if (encManifold3Forward_ == null) {
              encManifold3Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward();
            }
            EncManifold3Forward.MergeFrom(other.EncManifold3Forward);
          }
          if (other.encManifold1Forward_ != null) {
            if (encManifold1Forward_ == null) {
              encManifold1Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward();
            }
            EncManifold1Forward.MergeFrom(other.EncManifold1Forward);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (encManifold1Backward_ == null) {
                  encManifold1Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Backward();
                }
                input.ReadMessage(encManifold1Backward_);
                break;
              }
              case 18: {
                if (encManifold3Backward_ == null) {
                  encManifold3Backward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Backward();
                }
                input.ReadMessage(encManifold3Backward_);
                break;
              }
              case 26: {
                if (encMotorBomb1_ == null) {
                  encMotorBomb1_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_1();
                }
                input.ReadMessage(encMotorBomb1_);
                break;
              }
              case 34: {
                if (encMotorBomb2_ == null) {
                  encMotorBomb2_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_2();
                }
                input.ReadMessage(encMotorBomb2_);
                break;
              }
              case 42: {
                if (encManifold2Auxiliar_ == null) {
                  encManifold2Auxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Auxiliar();
                }
                input.ReadMessage(encManifold2Auxiliar_);
                break;
              }
              case 50: {
                if (encMotorBombAuxiliar_ == null) {
                  encMotorBombAuxiliar_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBombAuxiliar();
                }
                input.ReadMessage(encMotorBombAuxiliar_);
                break;
              }
              case 58: {
                if (encManifold2Main_ == null) {
                  encManifold2Main_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_2_Main();
                }
                input.ReadMessage(encManifold2Main_);
                break;
              }
              case 66: {
                if (encMotorBomb3_ == null) {
                  encMotorBomb3_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_3();
                }
                input.ReadMessage(encMotorBomb3_);
                break;
              }
              case 74: {
                if (encMotorBomb4_ == null) {
                  encMotorBomb4_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.MotorBomb_4();
                }
                input.ReadMessage(encMotorBomb4_);
                break;
              }
              case 82: {
                if (encManifold3Forward_ == null) {
                  encManifold3Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_3_Forward();
                }
                input.ReadMessage(encManifold3Forward_);
                break;
              }
              case 90: {
                if (encManifold1Forward_ == null) {
                  encManifold1Forward_ = new global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Types.Manifold_1_Forward();
                }
                input.ReadMessage(encManifold1Forward_);
                break;
              }
            }
          }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the PumpsEngine message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          public sealed partial class Manifold_1_Backward : pb::IMessage<Manifold_1_Backward> {
            private static readonly pb::MessageParser<Manifold_1_Backward> _parser = new pb::MessageParser<Manifold_1_Backward>(() => new Manifold_1_Backward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_1_Backward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward(Manifold_1_Backward other) : this() {
              solenoidCylinderMoveBackward_ = other.solenoidCylinderMoveBackward_;
              solenoidCylinderActiveBackward_ = other.solenoidCylinderActiveBackward_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Backward Clone() {
              return new Manifold_1_Backward(this);
            }

            /// <summary>Field number for the "solenoid_cylinder_move_backward" field.</summary>
            public const int SolenoidCylinderMoveBackwardFieldNumber = 1;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidCylinderMoveBackward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidCylinderMoveBackward {
              get { return solenoidCylinderMoveBackward_; }
              set {
                solenoidCylinderMoveBackward_ = value;
              }
            }

            /// <summary>Field number for the "solenoid_cylinder_active_backward" field.</summary>
            public const int SolenoidCylinderActiveBackwardFieldNumber = 2;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidCylinderActiveBackward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidCylinderActiveBackward {
              get { return solenoidCylinderActiveBackward_; }
              set {
                solenoidCylinderActiveBackward_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_1_Backward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_1_Backward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SolenoidCylinderMoveBackward != other.SolenoidCylinderMoveBackward) return false;
              if (SolenoidCylinderActiveBackward != other.SolenoidCylinderActiveBackward) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SolenoidCylinderMoveBackward != 0) hash ^= SolenoidCylinderMoveBackward.GetHashCode();
              if (SolenoidCylinderActiveBackward != 0) hash ^= SolenoidCylinderActiveBackward.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SolenoidCylinderMoveBackward != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) SolenoidCylinderMoveBackward);
              }
              if (SolenoidCylinderActiveBackward != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) SolenoidCylinderActiveBackward);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SolenoidCylinderMoveBackward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidCylinderMoveBackward);
              }
              if (SolenoidCylinderActiveBackward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidCylinderActiveBackward);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_1_Backward other) {
              if (other == null) {
                return;
              }
              if (other.SolenoidCylinderMoveBackward != 0) {
                SolenoidCylinderMoveBackward = other.SolenoidCylinderMoveBackward;
              }
              if (other.SolenoidCylinderActiveBackward != 0) {
                SolenoidCylinderActiveBackward = other.SolenoidCylinderActiveBackward;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    solenoidCylinderMoveBackward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    solenoidCylinderActiveBackward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_3_Backward : pb::IMessage<Manifold_3_Backward> {
            private static readonly pb::MessageParser<Manifold_3_Backward> _parser = new pb::MessageParser<Manifold_3_Backward>(() => new Manifold_3_Backward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_3_Backward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward(Manifold_3_Backward other) : this() {
              solenoidActiveFootBackward_ = other.solenoidActiveFootBackward_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Backward Clone() {
              return new Manifold_3_Backward(this);
            }

            /// <summary>Field number for the "solenoid_active_foot_backward" field.</summary>
            public const int SolenoidActiveFootBackwardFieldNumber = 1;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidActiveFootBackward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidActiveFootBackward {
              get { return solenoidActiveFootBackward_; }
              set {
                solenoidActiveFootBackward_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_3_Backward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_3_Backward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SolenoidActiveFootBackward != other.SolenoidActiveFootBackward) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SolenoidActiveFootBackward != 0) hash ^= SolenoidActiveFootBackward.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SolenoidActiveFootBackward != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) SolenoidActiveFootBackward);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SolenoidActiveFootBackward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidActiveFootBackward);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_3_Backward other) {
              if (other == null) {
                return;
              }
              if (other.SolenoidActiveFootBackward != 0) {
                SolenoidActiveFootBackward = other.SolenoidActiveFootBackward;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    solenoidActiveFootBackward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_1 : pb::IMessage<MotorBomb_1> {
            private static readonly pb::MessageParser<MotorBomb_1> _parser = new pb::MessageParser<MotorBomb_1>(() => new MotorBomb_1());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_1> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1(MotorBomb_1 other) : this() {
              oilTemperature_ = other.oilTemperature_;
              motorRpm_ = other.motorRpm_;
              motorPower_ = other.motorPower_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_1 Clone() {
              return new MotorBomb_1(this);
            }

            /// <summary>Field number for the "oil_temperature" field.</summary>
            public const int OilTemperatureFieldNumber = 1;
            private float oilTemperature_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float OilTemperature {
              get { return oilTemperature_; }
              set {
                oilTemperature_ = value;
              }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private uint motorRpm_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MotorRpm {
              get { return motorRpm_; }
              set {
                motorRpm_ = value;
              }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private float motorPower_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorPower {
              get { return motorPower_; }
              set {
                motorPower_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_1);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_1 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OilTemperature, other.OilTemperature)) return false;
              if (MotorRpm != other.MotorRpm) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorPower, other.MotorPower)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (OilTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OilTemperature);
              if (MotorRpm != 0) hash ^= MotorRpm.GetHashCode();
              if (MotorPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorPower);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (OilTemperature != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(OilTemperature);
              }
              if (MotorRpm != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(MotorRpm);
              }
              if (MotorPower != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(MotorPower);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (OilTemperature != 0F) {
                size += 1 + 4;
              }
              if (MotorRpm != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MotorRpm);
              }
              if (MotorPower != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_1 other) {
              if (other == null) {
                return;
              }
              if (other.OilTemperature != 0F) {
                OilTemperature = other.OilTemperature;
              }
              if (other.MotorRpm != 0) {
                MotorRpm = other.MotorRpm;
              }
              if (other.MotorPower != 0F) {
                MotorPower = other.MotorPower;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    OilTemperature = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    MotorRpm = input.ReadUInt32();
                    break;
                  }
                  case 29: {
                    MotorPower = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_2 : pb::IMessage<MotorBomb_2> {
            private static readonly pb::MessageParser<MotorBomb_2> _parser = new pb::MessageParser<MotorBomb_2>(() => new MotorBomb_2());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_2> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2(MotorBomb_2 other) : this() {
              motorRpm_ = other.motorRpm_;
              motorPower_ = other.motorPower_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_2 Clone() {
              return new MotorBomb_2(this);
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 1;
            private uint motorRpm_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MotorRpm {
              get { return motorRpm_; }
              set {
                motorRpm_ = value;
              }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 2;
            private float motorPower_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorPower {
              get { return motorPower_; }
              set {
                motorPower_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_2);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_2 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (MotorRpm != other.MotorRpm) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorPower, other.MotorPower)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MotorRpm != 0) hash ^= MotorRpm.GetHashCode();
              if (MotorPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorPower);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MotorRpm != 0) {
                output.WriteRawTag(8);
                output.WriteUInt32(MotorRpm);
              }
              if (MotorPower != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(MotorPower);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MotorRpm != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MotorRpm);
              }
              if (MotorPower != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_2 other) {
              if (other == null) {
                return;
              }
              if (other.MotorRpm != 0) {
                MotorRpm = other.MotorRpm;
              }
              if (other.MotorPower != 0F) {
                MotorPower = other.MotorPower;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    MotorRpm = input.ReadUInt32();
                    break;
                  }
                  case 21: {
                    MotorPower = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_2_Auxiliar : pb::IMessage<Manifold_2_Auxiliar> {
            private static readonly pb::MessageParser<Manifold_2_Auxiliar> _parser = new pb::MessageParser<Manifold_2_Auxiliar>(() => new Manifold_2_Auxiliar());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_2_Auxiliar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar(Manifold_2_Auxiliar other) : this() {
              hydraulicFootsPressure_ = other.hydraulicFootsPressure_;
              solenoidPressureFoots_ = other.solenoidPressureFoots_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Auxiliar Clone() {
              return new Manifold_2_Auxiliar(this);
            }

            /// <summary>Field number for the "hydraulic_foots_pressure" field.</summary>
            public const int HydraulicFootsPressureFieldNumber = 1;
            private float hydraulicFootsPressure_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float HydraulicFootsPressure {
              get { return hydraulicFootsPressure_; }
              set {
                hydraulicFootsPressure_ = value;
              }
            }

            /// <summary>Field number for the "solenoid_pressure_foots" field.</summary>
            public const int SolenoidPressureFootsFieldNumber = 2;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidPressureFoots_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidPressureFoots {
              get { return solenoidPressureFoots_; }
              set {
                solenoidPressureFoots_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_2_Auxiliar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_2_Auxiliar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HydraulicFootsPressure, other.HydraulicFootsPressure)) return false;
              if (SolenoidPressureFoots != other.SolenoidPressureFoots) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HydraulicFootsPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HydraulicFootsPressure);
              if (SolenoidPressureFoots != 0) hash ^= SolenoidPressureFoots.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HydraulicFootsPressure != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(HydraulicFootsPressure);
              }
              if (SolenoidPressureFoots != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) SolenoidPressureFoots);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HydraulicFootsPressure != 0F) {
                size += 1 + 4;
              }
              if (SolenoidPressureFoots != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidPressureFoots);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_2_Auxiliar other) {
              if (other == null) {
                return;
              }
              if (other.HydraulicFootsPressure != 0F) {
                HydraulicFootsPressure = other.HydraulicFootsPressure;
              }
              if (other.SolenoidPressureFoots != 0) {
                SolenoidPressureFoots = other.SolenoidPressureFoots;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    HydraulicFootsPressure = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    solenoidPressureFoots_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBombAuxiliar : pb::IMessage<MotorBombAuxiliar> {
            private static readonly pb::MessageParser<MotorBombAuxiliar> _parser = new pb::MessageParser<MotorBombAuxiliar>(() => new MotorBombAuxiliar());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBombAuxiliar> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar(MotorBombAuxiliar other) : this() {
              temperatureSensor_ = other.temperatureSensor_;
              motorRpm_ = other.motorRpm_;
              motorPower_ = other.motorPower_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBombAuxiliar Clone() {
              return new MotorBombAuxiliar(this);
            }

            /// <summary>Field number for the "temperature_sensor" field.</summary>
            public const int TemperatureSensorFieldNumber = 1;
            private float temperatureSensor_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float TemperatureSensor {
              get { return temperatureSensor_; }
              set {
                temperatureSensor_ = value;
              }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private uint motorRpm_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MotorRpm {
              get { return motorRpm_; }
              set {
                motorRpm_ = value;
              }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private float motorPower_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorPower {
              get { return motorPower_; }
              set {
                motorPower_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBombAuxiliar);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBombAuxiliar other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TemperatureSensor, other.TemperatureSensor)) return false;
              if (MotorRpm != other.MotorRpm) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorPower, other.MotorPower)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (TemperatureSensor != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TemperatureSensor);
              if (MotorRpm != 0) hash ^= MotorRpm.GetHashCode();
              if (MotorPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorPower);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (TemperatureSensor != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(TemperatureSensor);
              }
              if (MotorRpm != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(MotorRpm);
              }
              if (MotorPower != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(MotorPower);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (TemperatureSensor != 0F) {
                size += 1 + 4;
              }
              if (MotorRpm != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MotorRpm);
              }
              if (MotorPower != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBombAuxiliar other) {
              if (other == null) {
                return;
              }
              if (other.TemperatureSensor != 0F) {
                TemperatureSensor = other.TemperatureSensor;
              }
              if (other.MotorRpm != 0) {
                MotorRpm = other.MotorRpm;
              }
              if (other.MotorPower != 0F) {
                MotorPower = other.MotorPower;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    TemperatureSensor = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    MotorRpm = input.ReadUInt32();
                    break;
                  }
                  case 29: {
                    MotorPower = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_2_Main : pb::IMessage<Manifold_2_Main> {
            private static readonly pb::MessageParser<Manifold_2_Main> _parser = new pb::MessageParser<Manifold_2_Main>(() => new Manifold_2_Main());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_2_Main> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main(Manifold_2_Main other) : this() {
              hydraulicCylinderPressure_ = other.hydraulicCylinderPressure_;
              solenoidMovePressure_ = other.solenoidMovePressure_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_2_Main Clone() {
              return new Manifold_2_Main(this);
            }

            /// <summary>Field number for the "hydraulic_cylinder_pressure" field.</summary>
            public const int HydraulicCylinderPressureFieldNumber = 1;
            private float hydraulicCylinderPressure_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float HydraulicCylinderPressure {
              get { return hydraulicCylinderPressure_; }
              set {
                hydraulicCylinderPressure_ = value;
              }
            }

            /// <summary>Field number for the "solenoid_move_pressure" field.</summary>
            public const int SolenoidMovePressureFieldNumber = 2;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidMovePressure_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidMovePressure {
              get { return solenoidMovePressure_; }
              set {
                solenoidMovePressure_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_2_Main);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_2_Main other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HydraulicCylinderPressure, other.HydraulicCylinderPressure)) return false;
              if (SolenoidMovePressure != other.SolenoidMovePressure) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HydraulicCylinderPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HydraulicCylinderPressure);
              if (SolenoidMovePressure != 0) hash ^= SolenoidMovePressure.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (HydraulicCylinderPressure != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(HydraulicCylinderPressure);
              }
              if (SolenoidMovePressure != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) SolenoidMovePressure);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HydraulicCylinderPressure != 0F) {
                size += 1 + 4;
              }
              if (SolenoidMovePressure != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidMovePressure);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_2_Main other) {
              if (other == null) {
                return;
              }
              if (other.HydraulicCylinderPressure != 0F) {
                HydraulicCylinderPressure = other.HydraulicCylinderPressure;
              }
              if (other.SolenoidMovePressure != 0) {
                SolenoidMovePressure = other.SolenoidMovePressure;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    HydraulicCylinderPressure = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    solenoidMovePressure_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_3 : pb::IMessage<MotorBomb_3> {
            private static readonly pb::MessageParser<MotorBomb_3> _parser = new pb::MessageParser<MotorBomb_3>(() => new MotorBomb_3());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_3> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[7]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3(MotorBomb_3 other) : this() {
              motorRpm_ = other.motorRpm_;
              motorPower_ = other.motorPower_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_3 Clone() {
              return new MotorBomb_3(this);
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 1;
            private float motorRpm_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorRpm {
              get { return motorRpm_; }
              set {
                motorRpm_ = value;
              }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 2;
            private float motorPower_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorPower {
              get { return motorPower_; }
              set {
                motorPower_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_3);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_3 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorRpm, other.MotorRpm)) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorPower, other.MotorPower)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (MotorRpm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorRpm);
              if (MotorPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorPower);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (MotorRpm != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(MotorRpm);
              }
              if (MotorPower != 0F) {
                output.WriteRawTag(21);
                output.WriteFloat(MotorPower);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (MotorRpm != 0F) {
                size += 1 + 4;
              }
              if (MotorPower != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_3 other) {
              if (other == null) {
                return;
              }
              if (other.MotorRpm != 0F) {
                MotorRpm = other.MotorRpm;
              }
              if (other.MotorPower != 0F) {
                MotorPower = other.MotorPower;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    MotorRpm = input.ReadFloat();
                    break;
                  }
                  case 21: {
                    MotorPower = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class MotorBomb_4 : pb::IMessage<MotorBomb_4> {
            private static readonly pb::MessageParser<MotorBomb_4> _parser = new pb::MessageParser<MotorBomb_4>(() => new MotorBomb_4());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<MotorBomb_4> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[8]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4(MotorBomb_4 other) : this() {
              oilTemperature_ = other.oilTemperature_;
              motorRpm_ = other.motorRpm_;
              motorPower_ = other.motorPower_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public MotorBomb_4 Clone() {
              return new MotorBomb_4(this);
            }

            /// <summary>Field number for the "oil_temperature" field.</summary>
            public const int OilTemperatureFieldNumber = 1;
            private float oilTemperature_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float OilTemperature {
              get { return oilTemperature_; }
              set {
                oilTemperature_ = value;
              }
            }

            /// <summary>Field number for the "motor_rpm" field.</summary>
            public const int MotorRpmFieldNumber = 2;
            private uint motorRpm_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint MotorRpm {
              get { return motorRpm_; }
              set {
                motorRpm_ = value;
              }
            }

            /// <summary>Field number for the "motor_power" field.</summary>
            public const int MotorPowerFieldNumber = 3;
            private float motorPower_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public float MotorPower {
              get { return motorPower_; }
              set {
                motorPower_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as MotorBomb_4);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(MotorBomb_4 other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OilTemperature, other.OilTemperature)) return false;
              if (MotorRpm != other.MotorRpm) return false;
              if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MotorPower, other.MotorPower)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (OilTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OilTemperature);
              if (MotorRpm != 0) hash ^= MotorRpm.GetHashCode();
              if (MotorPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MotorPower);
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (OilTemperature != 0F) {
                output.WriteRawTag(13);
                output.WriteFloat(OilTemperature);
              }
              if (MotorRpm != 0) {
                output.WriteRawTag(16);
                output.WriteUInt32(MotorRpm);
              }
              if (MotorPower != 0F) {
                output.WriteRawTag(29);
                output.WriteFloat(MotorPower);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (OilTemperature != 0F) {
                size += 1 + 4;
              }
              if (MotorRpm != 0) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MotorRpm);
              }
              if (MotorPower != 0F) {
                size += 1 + 4;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(MotorBomb_4 other) {
              if (other == null) {
                return;
              }
              if (other.OilTemperature != 0F) {
                OilTemperature = other.OilTemperature;
              }
              if (other.MotorRpm != 0) {
                MotorRpm = other.MotorRpm;
              }
              if (other.MotorPower != 0F) {
                MotorPower = other.MotorPower;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 13: {
                    OilTemperature = input.ReadFloat();
                    break;
                  }
                  case 16: {
                    MotorRpm = input.ReadUInt32();
                    break;
                  }
                  case 29: {
                    MotorPower = input.ReadFloat();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_3_Forward : pb::IMessage<Manifold_3_Forward> {
            private static readonly pb::MessageParser<Manifold_3_Forward> _parser = new pb::MessageParser<Manifold_3_Forward>(() => new Manifold_3_Forward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_3_Forward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[9]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward(Manifold_3_Forward other) : this() {
              solenoidActiveForward_ = other.solenoidActiveForward_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_3_Forward Clone() {
              return new Manifold_3_Forward(this);
            }

            /// <summary>Field number for the "solenoid_active_forward" field.</summary>
            public const int SolenoidActiveForwardFieldNumber = 1;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidActiveForward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidActiveForward {
              get { return solenoidActiveForward_; }
              set {
                solenoidActiveForward_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_3_Forward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_3_Forward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SolenoidActiveForward != other.SolenoidActiveForward) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SolenoidActiveForward != 0) hash ^= SolenoidActiveForward.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SolenoidActiveForward != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) SolenoidActiveForward);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SolenoidActiveForward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidActiveForward);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_3_Forward other) {
              if (other == null) {
                return;
              }
              if (other.SolenoidActiveForward != 0) {
                SolenoidActiveForward = other.SolenoidActiveForward;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    solenoidActiveForward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

          public sealed partial class Manifold_1_Forward : pb::IMessage<Manifold_1_Forward> {
            private static readonly pb::MessageParser<Manifold_1_Forward> _parser = new pb::MessageParser<Manifold_1_Forward>(() => new Manifold_1_Forward());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Manifold_1_Forward> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Types.PumpsEngine.Descriptor.NestedTypes[10]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward(Manifold_1_Forward other) : this() {
              solenoidCylinderMoveForward_ = other.solenoidCylinderMoveForward_;
              solenoidCylinderActiveForward_ = other.solenoidCylinderActiveForward_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Manifold_1_Forward Clone() {
              return new Manifold_1_Forward(this);
            }

            /// <summary>Field number for the "solenoid_cylinder_move_forward" field.</summary>
            public const int SolenoidCylinderMoveForwardFieldNumber = 1;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidCylinderMoveForward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidCylinderMoveForward {
              get { return solenoidCylinderMoveForward_; }
              set {
                solenoidCylinderMoveForward_ = value;
              }
            }

            /// <summary>Field number for the "solenoid_cylinder_active_forward" field.</summary>
            public const int SolenoidCylinderActiveForwardFieldNumber = 2;
            private global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState solenoidCylinderActiveForward_ = 0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState SolenoidCylinderActiveForward {
              get { return solenoidCylinderActiveForward_; }
              set {
                solenoidCylinderActiveForward_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Manifold_1_Forward);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Manifold_1_Forward other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (SolenoidCylinderMoveForward != other.SolenoidCylinderMoveForward) return false;
              if (SolenoidCylinderActiveForward != other.SolenoidCylinderActiveForward) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (SolenoidCylinderMoveForward != 0) hash ^= SolenoidCylinderMoveForward.GetHashCode();
              if (SolenoidCylinderActiveForward != 0) hash ^= SolenoidCylinderActiveForward.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
              if (SolenoidCylinderMoveForward != 0) {
                output.WriteRawTag(8);
                output.WriteEnum((int) SolenoidCylinderMoveForward);
              }
              if (SolenoidCylinderActiveForward != 0) {
                output.WriteRawTag(16);
                output.WriteEnum((int) SolenoidCylinderActiveForward);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (SolenoidCylinderMoveForward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidCylinderMoveForward);
              }
              if (SolenoidCylinderActiveForward != 0) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SolenoidCylinderActiveForward);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Manifold_1_Forward other) {
              if (other == null) {
                return;
              }
              if (other.SolenoidCylinderMoveForward != 0) {
                SolenoidCylinderMoveForward = other.SolenoidCylinderMoveForward;
              }
              if (other.SolenoidCylinderActiveForward != 0) {
                SolenoidCylinderActiveForward = other.SolenoidCylinderActiveForward;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    solenoidCylinderMoveForward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    solenoidCylinderActiveForward_ = (global::AnnelidaDispatcher.Model.DataTransmission.SolenoidState) input.ReadEnum();
                    break;
                  }
                }
              }
            }

          }

        }
        #endregion

      }

      public sealed partial class SgnReactor : pb::IMessage<SgnReactor> {
        private static readonly pb::MessageParser<SgnReactor> _parser = new pb::MessageParser<SgnReactor>(() => new SgnReactor());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SgnReactor> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::AnnelidaDispatcher.Model.DataTransmission.AnnelidaSensors.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor(SgnReactor other) : this() {
          sgnTemperature_ = other.sgnTemperature_;
          obstructionDetected_ = other.obstructionDetected_;
          reactorPressure_ = other.reactorPressure_;
          flowPWM_ = other.flowPWM_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SgnReactor Clone() {
          return new SgnReactor(this);
        }

        /// <summary>Field number for the "sgn_temperature" field.</summary>
        public const int SgnTemperatureFieldNumber = 1;
        private float sgnTemperature_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float SgnTemperature {
          get { return sgnTemperature_; }
          set {
            sgnTemperature_ = value;
          }
        }

        /// <summary>Field number for the "obstruction_detected" field.</summary>
        public const int ObstructionDetectedFieldNumber = 2;
        private bool obstructionDetected_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool ObstructionDetected {
          get { return obstructionDetected_; }
          set {
            obstructionDetected_ = value;
          }
        }

        /// <summary>Field number for the "reactor_pressure" field.</summary>
        public const int ReactorPressureFieldNumber = 3;
        private float reactorPressure_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float ReactorPressure {
          get { return reactorPressure_; }
          set {
            reactorPressure_ = value;
          }
        }

        /// <summary>Field number for the "flowPWM" field.</summary>
        public const int FlowPWMFieldNumber = 4;
        private float flowPWM_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float FlowPWM {
          get { return flowPWM_; }
          set {
            flowPWM_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SgnReactor);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SgnReactor other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SgnTemperature, other.SgnTemperature)) return false;
          if (ObstructionDetected != other.ObstructionDetected) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ReactorPressure, other.ReactorPressure)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FlowPWM, other.FlowPWM)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (SgnTemperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SgnTemperature);
          if (ObstructionDetected != false) hash ^= ObstructionDetected.GetHashCode();
          if (ReactorPressure != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ReactorPressure);
          if (FlowPWM != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FlowPWM);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (SgnTemperature != 0F) {
            output.WriteRawTag(13);
            output.WriteFloat(SgnTemperature);
          }
          if (ObstructionDetected != false) {
            output.WriteRawTag(16);
            output.WriteBool(ObstructionDetected);
          }
          if (ReactorPressure != 0F) {
            output.WriteRawTag(29);
            output.WriteFloat(ReactorPressure);
          }
          if (FlowPWM != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(FlowPWM);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (SgnTemperature != 0F) {
            size += 1 + 4;
          }
          if (ObstructionDetected != false) {
            size += 1 + 1;
          }
          if (ReactorPressure != 0F) {
            size += 1 + 4;
          }
          if (FlowPWM != 0F) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SgnReactor other) {
          if (other == null) {
            return;
          }
          if (other.SgnTemperature != 0F) {
            SgnTemperature = other.SgnTemperature;
          }
          if (other.ObstructionDetected != false) {
            ObstructionDetected = other.ObstructionDetected;
          }
          if (other.ReactorPressure != 0F) {
            ReactorPressure = other.ReactorPressure;
          }
          if (other.FlowPWM != 0F) {
            FlowPWM = other.FlowPWM;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                SgnTemperature = input.ReadFloat();
                break;
              }
              case 16: {
                ObstructionDetected = input.ReadBool();
                break;
              }
              case 29: {
                ReactorPressure = input.ReadFloat();
                break;
              }
              case 37: {
                FlowPWM = input.ReadFloat();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
